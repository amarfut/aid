{"_id":{"$oid":"5dbeb7d2cdb700e273c1add8"},"Title":"Пишут ли программисты код?","Url":"pishut-li-programmisty-kod","Text":"<p>Основная работа программиста заключается в написании кода. Именно такого мнения придерживается большинство людей, которые знакомы с программированием в основном из голливудских фильмов, где программист набирает код со скоростью 500 символов в минуту. Код – это первая ассоциация всех людей, включая самих программистов, которая приходит в голову при слове “программирование”. Но действительно ли написание кода является ключевым аспектом в программировании? Давайте разбираться.</p>{ad}<p>Для начала уясним для чего вообще предназначено программирование. Оно предназначено для решения реальных человеческих проблем, таких как поиск оптимального маршрута перелета между странами, прогноз курса валют, заказ товаров на дом и многих других. Инструментом для решения таких задач является программный код, который как и любой другой инструмент бесполезен, пока нет проработанного видения решения и четкого плана работ. Следовательно, перед тем как приступать к написанию программного кода, задача должна быть полностью решена в голове. </p> <p>Ведь когда некоторый заказчик ставит перед программистом задачу – то программист не приступает немедленно к написанию кода. Вначале программист должен переварить требования заказчика, решить задачу у себя в голове, изобразить решение схематически на доске или клочке бумаги, найти как можно больше слабых мест своего же решения, улучшить свое решение. И только после того как задача решена на бумаге, можно приступать к написанию кода.</p>  <p>Например, перед имплементацией такого сервиса как Instagram, программист должен спроектировать отдельные сервисы для загрузки и чтения изображений, спроектировать схему хранилища для самих изображений и их метаданных, продумать механизмы репликации, резервного копирования, кеширования, обновления данных в реальном времени, балансировку нагрузки и много другого.</p>  <p>Даже имплементация чего-то более простого, как например функционала регистрации пользователей, требует проектирования таблиц базы данных для хранения информации о пользователях, проектирования классов и методов, которые будут отвечать за сохранение и извлечение данных из базы, продумывания валидации, обработки ошибок, пользовательского интерфейса, формата передачи данных между клиентом и сервером и так далее.</p>    <p>Написать код по готовой задаче может и вчерашний выпускник компьютерной академии, а грамотно спроектировать задачу может только программист, обладающий большим опытом, аналитическим мышлением и прочными фундаментальными знаниями компьютерных наук.</p>","Created":{"$date":{"$numberLong":"1575057600000"}},"Description":"Пишут ли программисты код регулярно или их работа заключается совсем в ином?","Type":{"$numberInt":"2"},"Views":{"$numberInt":"169"},"CommentsCount":{"$numberInt":"0"},"WhoDisliked":[],"WhoLiked":["5ddfa425048adc0001295115","5e3803a5a8ca930001e0f0a7"],"Tags":["rabotaprogrammista"]}
{"_id":{"$oid":"5dbeb8c3cdb700e273c1ae1b"},"Title":"Причины появления спагетти-кода","Url":"prichiny-poyavleniya-spagetti-koda","Text":"<p>Спагетти-кодом обычно называют очень запутанный, неразборчивый программный код, чтение которого вызывает только раздражение и злость. Программисту обычно требуется минимум в несколько раз больше времени на чтение спагетти-кода, чем хорошего структурированного кода. В спагетти-код крайне опасно вносить изменения, так как это может привести к непредсказуемым ошибкам в работе всей программы. Спагетти-код далеко не является редкостью в современной IT индустрии. Множество программ имеют в себе фрагменты спагетти-кода, что приводит к увеличению стоимости программного обеспечения, а также мягко говоря к недовольству программистов, которым приходится с таким наследием работать. Так каковы же причины появления спагетти? Давайте разбираться.</p>{ad}<h3>Код отражает ход мыслей программиста</h3><p>Первая причина появления спагетти заключается в ходе мышления программиста, во время имплементации задачи. Ведь на самом деле любой программный код отражает ход мыслей того программиста, который его писал. И если в голове человека во время написания кода был бардак, то программный код непременно покажет действительность.</p><p>Представьте человека, которому необходимо попасть из точки А в точку B по кратчайшему пути. Если перед началом движения человек хорошо подумает свой путь и изучит карту, то вероятно он преодолеет расстояние максимально быстро. Но если путешественник начнет идти наобум безо всякого планирования, то его путь будет крайне запутанным и даже до пунтка назначения можно не добраться и вовсе.</p><h3>Время - деньги</h3><p>Вторая причина появления спагетти заключается в банальной Нехватке времени и Спешке. Программист может обладать прекрасным аналитическим мышлением, большим опытом и знаниями, однако он все равно может писать спагетти-код, если ему не хватает времени на предварительное обдумывание своего решения. А спешить программисты могут например по причине спешки заказчика, который боится проиграть своим конкурентам.</p><p>В современных IT реалиях тяжело выделить какую-то одну причину появления спагетти-кода - обе они занимают равноправные позиции.</p> <p>Для борьбы со спагетти-кодом используют статические анализаторы кода. Они способны просканировать всю кодовую базу проекта, которая обычно составляет сотни тысяч строк кода, и показать в каких же местах завалялось протухшее спагетти. После обнаружения спагетти, программисты начинают процесс рефакторинга, цель которого улучшить качество кода, не повлияв на поведение программы. В итоге после успешного рефакторинга, спагетти-код из запутанного и нечитабельного превращается в структурированный и понятный, то есть в лазанья-код.</p>","Created":{"$date":{"$numberLong":"1575230400000"}},"Description":"Спагетти-код - это не пункт меню в тематическом IT-кафе, а некачественный код, который каждый программист избегает как только может.","Type":{"$numberInt":"2"},"CommentsCount":{"$numberInt":"1"},"Views":{"$numberInt":"174"},"WhoDisliked":[],"WhoLiked":["5e3803a5a8ca930001e0f0a7"],"Tags":["quality","rabotaprogrammista"]}
{"_id":{"$oid":"5dbecc34cdb700e273c1b326"},"Title":"Какой тип IT-компании выбрать программисту?","Url":"kakoy-tip-it-kompanii-vybrat-programmistu","Text":"<p>Компании по разработке программного обеспечения можно разделить на три больших группы, а именно <b>аутсорсинговые компании</b>, <b>продуктовые компании</b> и <b>аутстаффинговые компании</b>. В чем их сходства и отличия? Давайте разбираться.</p>{ad}<h3>Аутсорсинговая компания</h3><p>Аутсорсинговая компания (outsourcing) - занимается разработкой программного обеспечения, а также поддержкой и обслуживанием программного обеспечения от различных заказчиков. Успех компании полностью зависит от количества привлеченных заказчиков и их уровня. Аутсорсинговая компания зарабатывает на разнице между тем, что платит заказчик компании и тем, что компания платит программисту. В большой аутсорсинговой компании есть возможность часто менять проекты, что позволяет получить расширить опыт в технологиях и в подходах разработки программного обеспечения. К недостаткам аутсорса относится большая вероятность работы с некачественным кодом, чем в продуктовых компаниях.</p><h3>Продуктовая компания</h3><p>Продуктовая компания (product) - занимается разработкой своего собственного продукта или нескольких продуктов. Часто такая компания нанимает специалистов, которые необходимы на всех этапах жизненного цикла программного продукта, начиная от программистов и заканчивая маркетологами. Успех продуктовых компаний зависит от того, как хорошо их продукт продается на рынке. К известным продуктовым компаниям относятся Google, Facebook, Booking и другие. В продуктовых компаниях программист ограничен теми языками программирования и технологиями, при помощи которых разрабатывается продукт, но качество кода обычно на порядок выше, чем в аутсорсе. Также некоторым программистам важно не просто работать и получать деньги за выполненную работу, а стать частью какого-то серьезного и именитого продукта.</p><h3>Аутстаффинговая компания</h3><p>Аутстаффинговые компании (outstaffing) - занимаются простой продажей человеко-часов заказчикам. Аутстаффинговая компания представляет собой обычного посредника между программистом и заказчиком. Программист регулярно коммуницирует с заказчиком и выполняет поставленные заказчиком задачи. Не редко заказчик попросту доукомплектовывает собственную команду программистов, обращаясь в аутстаффинговую компанию. В аутстафинговых компаниях так же как и в аутсорсе существует возможность менять заказчиков. Работа в аутстаффинговых компаниях обычно подходит для матерых программистов, так как необходимо регулярно общаться с заказчиком и отвечать за свои решения непосредственно перед ним. </p>","Created":{"$date":{"$numberLong":"1575316800000"}},"Description":"Аутсорсинговые (outsourcing), продуктовые (product) и аутстаффинговые (outstaffing) компании - разбираемся с их сходствами и отличиями.","Type":{"$numberInt":"1"},"WhoDisliked":[],"WhoLiked":["5e3803a5a8ca930001e0f0a7"],"Views":{"$numberInt":"134"},"CommentsCount":{"$numberInt":"0"},"Tags":["itcompany","rabotaprogrammista"]}
{"_id":{"$oid":"5dbecc37cdb700e273c1b32c"},"Title":"Не дается обучение программированию?","Url":"ne-dayetsya-obucheniye-programmirovaniyu","Text":"<p>Работая преподавателем в компьютерной академии, я многократно подмечал любопытную особенность. Многие из тех студентов которые начали свое обучение с полного нуля, в течение многих месяцев практически не сдвигались с места в познании программирования. Однако в какой-то один момент, обычно спустя 4-6 месяцев со старта обучения, происходил внезапный и внушительный сдвиг, после которого студенты начинали осваивать новые знания какими-то ранее невиданными ранее темпами. В чем же причина такого резкого сдвига? Давайте разбираться.</p>{ad}  <p>Несмотря на то, что программирование является точной наукой, оно все равно воспринимается начинающими студентами как нечто абстрактное или даже магическое. Почему так происходит? Смотрите, дело в том, что в процессе чтения и трансформации программного кода во что-то работающее, принимают участие процессор и оперативная память. Процессор выполняет написанные программные команды, изменяя состояние оперативной памяти. Например, процессор понимает что вот такая написанная программистом команда</p> <p>int val = 41;</p> <p>необходима для создания ячейки в оперативной памяти с цифрой 41.</p> <p>Так вот и процессор и оперативная память являются такими вещами, которые нельзя потрогать, рассмотреть под увеличительным стеклом и четко увидеть их работу. По сути программист работает с черным ящиком, в который он отправляет какие-то команды, а они там магическим образом превращаются в функциональные программы.</p> <p>И вот именно с попытками <u>понять черный ящик</u> и связанно многомесячное стояние на месте некоторых людей, которые начинают изучать программирование. И тут главное не бросить обучение до момента, как барьер будет преодолен.</p><h3>Как можно больше иллюстраций</h3><p>Для максимального сокращения время преодоления барьера необходимы картинки. Любая хорошая книга по программированию содержит схематические иллюстрации к тексту, которые например визуализируют результат выполнения программного кода в оперативной памяти компьютера.</p> <p>Вы можете требовать от своего преподавателя иллюстрировать свои объяснения, а также пытаться регулярно рисовать такие иллюстрации самостоятельно. Как уже упоминалось раньше, многие из написанных вами команд изменяют состояние оперативной памяти. Поэтому будет отлично если вы будете рисовать отдельную схематическую иллюстрацию, на все возможные состояния оперативной, которое создается в результате выполнения вашего кода. Например, если вы написали вот такой код который суммирует все элементы массива</p> <p><img src='https://storage.googleapis.com/youit/images/for-loop-sum-array.png' alt='Цикл, сумма элементов массива' class='image-in-post' /></p> то попробуйте его визуализировать. У вас должно получиться примерно такое: <p><img src='https://storage.googleapis.com/youit/images/stack-heap.png' alt='Стек и куча' class='image-in-post' /></p> <p>И чем больше иллюстраций вы разберете и составите самостоятельно, тем быстрее барьер будет преодолен.</p>","Created":{"$date":{"$numberLong":"1575320400000"}},"Description":"Почему изучение программирования может казаться непреодолимым в начале пути и как сдвинуться с мертвой точки.","Type":{"$numberInt":"2"},"WhoDisliked":[],"WhoLiked":["5e3803a5a8ca930001e0f0a7"],"Views":{"$numberInt":"198"},"CommentsCount":{"$numberInt":"2"},"Tags":["learning","programming","junior"]}
{"_id":{"$oid":"5dbecc39cdb700e273c1b330"},"Title":"Как найти работу программиста без опыта?","Url":"kak-programmistu-bez-opyta-nayti-rabotu","Text":"<p>Распространенной причиной отказов в трудоустройстве начинающим программистам является отсутствие опыта работы. Безусловно каждой компании необходим человек, способный прийти на работу и сразу без продолжительного обучения начать решать реальные боевые задачи. И подобное положение дел демотивирует некоторых соискателей на дальнейшие поиски. Ведь по факту люди попадают в замкнутый круг, в котором для получения опыта необходимо устроиться на работу, на которую не берут без опыта. Как же разорвать этот круг? Давайте разбираться.</p>{ad}<p>Одна из особенностей программирования, которой обладает не каждая профессия, заключается в том, что опыт и навыки, приближенные к реальным, можно получить самостоятельно у себя дома сидя за компьютером. Для этого необходимо придумать самому себе какой-нибудь проект, например интернет-магазин или приложение для подсчета калорий, и реализовать его. Ключевым критерием собственного проекта или его еще называют pet-проект, является <b>его завершенность</b>. То есть ваш проект должен как минимум компилироваться и запускаться, а также реализовывать весь основной функционал подобных реальных программ. Например если вы решили сделать интернет-магазин, то в нем должны быть реализованы как минимум следующие функции:</p> <ul><li>отображение товаров по категориям</li> <li>поиск товаров</li><li>корзина заказов</li><li>аутентификация и авторизация пользователей<li>панель администратора для добавления товаров в магазин</li></ul><h3>Проект не ради проекта, ради знаний</h3><p>Также важно не просто сделать проект работающий, а сделать его как можно более правильнее с точки зрения лучших практик программирования, стандартов кода, принципов и шаблонов проектирования. Для этого ставьте под сомнение каждое свое микро-решение во время разработки и пытайтесь загуглить как нужно делать правильно. Поверьте, что практически любая задача уже была решена до вас, от не требуется изобретать велосипед, а только уметь уместно использовать стандартные решения. Такой подход отнимет у вас в раза два больше времени на разработку проекта, но позволит вам получить ценные знания, которые помогут вам при прохождении интервью и покажут вас как крайне целеустремленного молодого специалиста.</p>","Created":{"$date":{"$numberLong":"1575403200000"}},"Type":{"$numberInt":"1"},"Views":{"$numberInt":"179"},"Description":"Распространенной причиной отказов в трудоустройстве начинающим программистам является отсутствие опыта работы. Безусловно каждой компании необходим человек, способный прийти на работу и сразу без продолжительного обучения начать решать реальные боевые задачи. И подобное положение дел демотивирует некоторых соискателей на дальнейшие поиски.","CommentsCount":{"$numberInt":"0"},"WhoDisliked":[],"WhoLiked":["5ddfa425048adc0001295115","5e3803a5a8ca930001e0f0a7"],"Tags":["junior","carrier"]}
{"_id":{"$oid":"5dbecc3bcdb700e273c1b334"},"Title":"В чем разница между Junior, Middle и Senior программистами?","Url":"v-chem-raznitsa-mezhdu-junior-middle-i-senior-programmistami","Text":"<p>Программистов обычно классифицируют на три категории по их знаниям и опыту работы, а именно на Junior, Middle и Senior. Какие существуют различия между тремя должностями, давайте разбираться.</p>{ad}<h3>Junior</h3><p>Junior - это программист который имеет небольшой опыт в разработке программного обеспечения, обычно до 1-2 лет. На данном уровне программист должен хорошо знать свой язык программирования, а также хорошо ориентироваться в смежных технологиях. Например, если речь идет о .NET программисте, то он должен знать язык C# а также ориентироваться в многопоточности, реляционных базах данных, модульном тестировании, технологиях ORM, системах контроля версий. Джуниоры могут работать самостоятельно в основном решая мелкие задачи, то есть исправляя дефекты или реализуя маленькие неключевые фрагменты системы. Все остальное выполняется под руководством более опытных коллег.</p><h3>Middle</h3><p>Следующим этапом развития в карьере является позиция Middle. Отличие от Джуниор заключается в том, что Мидл может выполнять большой спектр задач уже самостоятельно без надзора опытных коллег, за исключением реализации комплексных компонентов системы.  Мидл достаточно хорошо владеет своим языком программирования и технологиями, неплохо ориентируется в шаблонах и практиках проектирования. Также он понимает основные бизнес-процессы своего заказчика, что позволяет ему реализовывать задачи более осмысленно и замечать просчеты в описанных к функциональности требованиях.</p><h3>Senior</h3><p>Следующая позиция это Senior. Senior имеет за спиной серьезный багаж опыта в виде тысяч решенных ранее задач, что позволяет ему принимать правильные технологические решения, а решать проблемы еще до их появления. Senior уже может разрабатывать комплексные компоненты программного обеспечения самостоятельно, а также брать на себя полную ответственность за результат. Синьйору необходимо понимать внутреннее устройство библиотек и фреймворков, которые он использует в своей работе. Хороший синьор помимо технических умений должен иметь также хорошие коммуникативные навыки, ведь ему часто приходится доносить свои мысли другим своим подчиненным и заказчику.</p><h3>А что дальше?</h3><p>Стоит отметить, что позиция синьора не является карьерным пределом для программиста. После синьора можно стать техническим лидером либо архитектором. Однако обе эти должности скорее являются не логическим и обязательным шагом в карьере, а шагом немного в сторону с пути программиста. Ведь что технический лидер, что архитектор в силу специфики своих должностей не заняты ежедневным написанием кода - появляется множество дополнительных обязанностей, в числе которых менеджмент, работа с документацией, регулярные коммуникация со стейкхолдерами и другие. По этой причине программист теряет возможность регулярно писать код, а такое положение дел не является приемлемым для настоящего программиста.</p>","Created":{"$date":{"$numberLong":"1575489600000"}},"Description":"Рассмотрим разницу между Junior, Middle и Senior программистами, а также существует ли рост после достижения позиции Senior.","Type":{"$numberInt":"1"},"WhoDisliked":[],"WhoLiked":["5e3803a5a8ca930001e0f0a7"],"Views":{"$numberInt":"205"},"CommentsCount":{"$numberInt":"0"},"Tags":["rabotaprogrammista","carrier"]}
{"_id":{"$oid":"5dbecc3dcdb700e273c1b33a"},"Title":"Cленг программистов в IT","Url":"sleng-programmistov-v-it","Text":"<p>Если вы считаете, что русскоязычный программист в общении со своими коллегами использует русский язык - то это не совсем так. При прослушивании разговора двух программистов на работе, вы скорее всего поймете не более половины их диалога без должной подготовки. И тут дело вовсе не в оперировании техническими терминами или проблемами с дикцией. В чем же дело? Давайте разбираться.</p>{ad}<p>Все дело в IT-шном сленге, который представляет собой объединение русского языка с вкраплением множества английских слов. Вот несколько фраз на таком сленге:</p><p><i>“Я подконекчусь (to connect) на кол (a call) с кастомером через 5 минут”</i></p><p><i>“Нужно срочно заимплементить (to implement) фичу (a feature) и залить ее на прод (production)”</i></p><p><i>“Этот баг (bug) можно пофиксить (to fix) только оверрайднув (to override) метод”</i></p><p>Как видите, некоторые русские слова заменяются английскими и произносятся на русский лад. Для неподготовленного человека подобный сленг может показаться желанием просто повыпендриваться, показать свою крутость в такой странный способ. Однако причины появления такого сленга кроются совсем в другой плоскости.</p> <p>Дело в том, что программист регулярно контактирует с англоязычной средой - общается с заказчиками на английском, читает документацию. И даже сам программный код, который программист пишет изо дня в день, имеет множество английских ключевых слов. Например, вот так выглядит код, который загрузил из базы данных для вас этот пост:</p><p><img src='https://storage.googleapis.com/youit/images/getpostqueryhandler-c%23.png' class='image-in-post' alt='Get Post Query Handler in C#' /></p><p>Так или иначе различные английские слова постепенно просачиваются в русский, особенно когда сам русский язык не имеет подходящего, короткого и удобного в произношении слова-аналога. Например, тяжело найти адекватный аналог в русском языке таким распространенным понятиям среди программистов как production environment, release или feature. Таким образом английские слова просто заполняют существующие пробелы русского. И не более того.</p>","Created":{"$date":{"$numberLong":"1575576000000"}},"Type":{"$numberInt":"1"},"Description":"Фича, оверрайднуть, на коле - почему программисты разговаривают на непонятном сленге, какие причины его появления, примеры фраз.","WhoDisliked":[],"WhoLiked":["5e3803a5a8ca930001e0f0a7"],"Views":{"$numberInt":"187"},"CommentsCount":{"$numberInt":"0"},"Tags":["rabotaprogrammista"]}
{"_id":{"$oid":"5dbecc3fcdb700e273c1b33e"},"Title":"Junior C#! Не иди на собеседование, если не знаешь ответов на такие вопросы","Url":"junior-csharp-ne-idi-na-sobesedovaniye-esli-ne-znayesh-otvetov-na-takiye-voprosy","Text":"<p>Разработка программного обеспечения является настолько безграничной темой, что по ней можно поставить бесчисленное количество вопросов. Несмотря на подобное разнообразие, существует небольшой ряд фундаментальные вопросов, без которых не обходится ни одно собеседование по C# на должность Junior C# Developer. И незнание ответов на эти вопросы поставит под сомнение ваше потенциальное попадание на работу, невзирая на то как вы справитесь с другими менее фундаментальными вопросами.</p><p>Итак, не идите на собеседование, если вы не знаете ответов на перечисленные ниже вопросы.</p>{ad}<i><h3>C#</h3>Как работает JIT компиляция?</br>В чем разница между ссылочными и значимыми типами данных? <br/>Опишите работу сборщика мусора? <br/>Каково предназначение делегатов и событий?<br/>В чем разница между интерфейсом и абстрактным классом? <br/>Какая цель у интерфейсов IEnumerable и IEnumerator? <br/>В чем разница между типами String и StringBuilder? <br/>От какого базового типа наследуются все типы в .NET? <br/>В чем смысл процессов сериализации и десериализации? <br/>Чем коллекция Dictionary отличается от HashSet? <br/><h3>ООП</h3>Какие концепции ООП вы знаете? <br/>В чем разница между Абстракцией и Инкапсуляцией? <br/>Какие принципы SOLID вам знакомы? <br/>Что означает “Внедрение зависимостей”?<br/>В чем недостатки шаблона проектирования Одиночки или Singleton? <br/><h3>MSSQL</h3>Как создать связь многие ко многим? <br/>В чем преимущества нормализации данных? <br/>Для чего используется оператор HAVING? <br/>Как работает оператор INNER JOIN? <br/><h3>Алгоритмы</h3>В чем разница между структурами Stack, Queue и LinkedList? <br/>Как работает бинарный поиск? <br/>Как устроены хеш-таблицы<br/>Можете ли вы изобразить на листочке как выглядит бинарное дерево?</i> <br/><p><br/>Если вы не знаете ответа на какой-то из вышеперечисленных вопросов, давайте обсудим его в комментариях.</p>","Created":{"$date":{"$numberLong":"1575662400000"}},"Type":{"$numberInt":"2"},"Description":"Разработка программного обеспечения является настолько безграничной темой, что по ней можно поставить бесчисленное количество вопросов.","WhoDisliked":[],"WhoLiked":["5ddfa425048adc0001295115","5e272688c6808700013fc4f2","5e3803a5a8ca930001e0f0a7"],"Views":{"$numberInt":"348"},"CommentsCount":{"$numberInt":"1"},"Tags":["interview","csharp","carrier"]}
{"_id":{"$oid":"5dbecc41cdb700e273c1b344"},"Title":"Нужны ли программисту сертификаты?","Url":"nuzhny-li-programmistu-sertifikaty","Text":"<p>В наше время существует огромное количество сертификаций, которые покрывают практически все инструменты IT-сферы, начиная от сертификаций по языкам программирования и заканчивая сертификациями по процессам разработки программного обеспечения. Программист, обладающий рядом сертификатов, выглядит крутым парнем и должен значительно выделяться в глазах своего работодателя и среди остальных коллег, которые этих самых сертификатов не имеют. Но действительно ли наличие сертификатов у программиста всегда свидетельствует о его крутости? Давайте разбираться.</p>{ad}<p>Сертификаты отличаются не только тематикой, но и уровнем на котором они покрывают определенную тему. И такие сертификаты нужно уметь отличать один от другого, особенно работодателю. Одни сертификаты практически не возможно получить без реального опыта работы, а другие выдаются просто за то, что человек прослушал определенный курс. Прослушать курс может каждый, поэтому работодателю очевидно не стоит обращать внимание на подобные сертификаты. А программистам тем более не стоит прикреплять их к своему резюме, даже если прикрепить больше нечего.</p><h3>Сертификат не ради сертификата</h3><p> Важную роль играет подход программиста к подготовке к  сертификации. Первый возможный подход заключается в подготовке к сертификации ради сдачи самой сертификации, иными словами ради получения заветной бумажки со штампом. Выбрав такой путь, программист будет заниматься не более чем заучиванием подобных вопросов из интернета, без глубокого погружения в тему. </p><p>Но есть и второй подход, который начинается с осознания того, что сам факт получения или неполучения сертификата не столь важен, как сам кропотливый процесс подготовки к нему. Регистрация на экзамен - это лишь стимул и очерченные временные рамки для изучения большого количества материала, на который раньше никак не хватало времени. При втором подходе, имеющиеся знания в голове упорядочиваются, а также приобретаются новые, вследствие чего программист несомненно будет нести большую ценность для работодателя. </p><p>Всегда выбирайте второй вариант, так как в долгосрочной перспективе он бесценен. С новыми полученными зданиями в процессе подготовки к сертификации вы станете увереннее себя чувствовать как при решении сложных задач, при прохождении собеседований и временно утолите свою жажду к новым знаниям.</p>","Created":{"$date":{"$numberLong":"1575748800000"}},"Type":{"$numberInt":"1"},"Description":"В наше время существует огромное количество сертификаций, которые покрывают практически все инструменты IT-сферы, начиная от сертификаций по языкам программирования и заканчивая сертификациями по процессам разработки программного обеспечения.","WhoDisliked":[],"WhoLiked":["5ddfe9e6048adc000129511e","5e3803a5a8ca930001e0f0a7"],"Views":{"$numberInt":"159"},"CommentsCount":{"$numberInt":"0"},"Tags":["certificate"]}
{"_id":{"$oid":"5dbecc43cdb700e273c1b348"},"Title":"Junior developer, повышаем твои шансы на прохождение собеседования","Url":"junior-developer-povishayem-tvoi-shansy-na-prokhozhdeniye-sobesedovaniya","Text":"<p>Для того чтобы понять как повысить свои шансы на успешное прохождение собеседования, давайте сначала посмотрим на то как проходит обычное собеседование в среднестатистическую аутсорсинговую компанию.</p>{ad}<p>Вы приходите в офис и интервьюер начинает задавать вам вопросы, которые можно поделить на две категории: теоретические вопросы в основном по языку программирования, а также вопросы по вашему опыту работы. Но если вы начинающий разработчик, то интервьюер прекрасно понимает, что много о вашем опыте работы не поговоришь. Однако если вы еще не успели получить коммерческий опыт разработки, это не значит что приходить можно с пустыми руками. Сделайте небольшой pet-проект, который можно при необходимости презентовать. Однако даже с наличием собственного проекта, большая часть времени будет отведена под обычные теоретические вопросы. И ключевое слово здесь - Теория.</p><h3>Секрет в теории</h3><p>Для того, чтобы шансы на прохождения собеседования значительно возросли, вам необходимо научиться красиво и уверенно отвечать на распространенные теоретические вопросы по вашему языку программирования и смежным технологиям.</p><p>Вот представьте себе приятное изумление интервьюера, когда в ответ на вопрос: <i>“Что такое инкапсуляция?”</i> вместо невнятного и неправильного ответа <i>“инкапсуляция - сделать поля приватными”</i>, он слышит от вас ответ: <i>“ключевыми аспектами инкапсуляции являются защита инвариантов класса и сокрытие информации”</i>. Подобные ответы покажут вас как программиста, который не просто пишет код на автомате при помощи StackOverflow, а который всегда докапывается до сути и подходит к познанию своего дела как к науке, а не как к примитивному инструменту.</p><h3>Чтение как образ жизни</h3><p>Научиться грамотно отвечать намного проще чем, может показаться на первый взгляд. Необходимо лишь регулярно читать хорошие книги. Старайтесь читать их хорошем переводе на свой родной язык, ведь ваши первые собеседования будут скорее всего также на русском. Не упускайте из виду ни единой строчки книги, как какую-то сухую теорию. Делайте выписки всего что вы не поняли, и старайтесь найти доступное объяснение в интернете. Прорабатывайте весь новый материал, старайтесь каждой новой книгой или статьей переосмыслить то что вы уже знаете, и в долгосрочной перспективе вы будете приятно удивлены полученным результатом. </p>","Created":{"$date":{"$numberLong":"1575835200000"}},"Type":{"$numberInt":"1"},"Description":"Для того чтобы понять как повысить свои шансы на успешное прохождение собеседования, давайте сначала посмотрим на то как проходит обычное собеседование в среднестатистическую аутсорсинговую компанию.","WhoDisliked":[],"WhoLiked":["5ddfa425048adc0001295115","5e3803a5a8ca930001e0f0a7"],"Views":{"$numberInt":"251"},"CommentsCount":{"$numberInt":"4"},"Tags":["interview"]}
{"_id":{"$oid":"5de7dcf4264c0bcdadcf55f3"},"Title":"Как попасть в IT компанию НЕ программистом?","Url":"kak-popast-v-it-kompaniyu-ne-programmistom","Text":"<p>Если по каким-либо причинам вы не хотите становиться программистом, но очень хотите попасть на работу в IT-компанию, то существует целый список интересных альтернатив. Давайте с ними разбираться. </p>{ad}<p><b>Мануальный тестировщик/Quality Control (QC)/Quality Assurance (QA)</b> - работа заключается в ручном поиске дефектов или багов в программных продуктах. Профессия требует высокой внимательности и скрупулёзности. Обучиться мануальному тестированию можно самостоятельно путем чтения специализированной литературы, просмотром видео-курсов и презентаций. Практику можно получить путем тестирования различных сайтов, будь то amazon.com, youtube.com и прочие. </p><p><b>Автоматизатор/Automation Quality Control (ATQC)</b>  - работа заключается в написании специальных программ-тестов, которые способны автоматически тестировать программный продукт. Такие программы-тесты позволяют существенно снизить количество мануальных тестировщиков на проекте. Автоматизатор должен обладать знаниями языков программирования. Обычно автоматизаторы это перерожденные мануальные тестировщики. </p><p><b>Менеджер проектов/Project Manager (PM)</b>  - работа заключается в управлении командой разработчиков, контроле выполнения работ, поиск новых сотрудников, коммуникации с заказчиком, решение зарплатных вопросов и так далее. Менеджеры проектов должны хорошо понимать процессы по которым разрабатываются проекты. Поэтому перед тем как стать менеджером, человек должен поработать в IT-компании на другой должности. В подавляющем большинстве случаев менеджерами проектов становятся мануальные тестировщики. </p> <p><b>Бизнес-аналитик/Business Analyst (BA)</b>  - работа заключается в общении с заказчиком, выяснении его потребностей и документировании таких потребностей в виде текста и мокапов. Программисты разрабатывают программный продукт, четко следуя документации от бизнес-аналитика. BA должен отлично разбираться в бизнесе заказчика. Например, если заказчик хочет сайт для бронирования авиа-билетов, бизнес-аналитик должен знать все о видах билетов, скидках, правилах отмены резервации и так далее. </p> <p><b>Рекрутер/Human resources (HR)</b> - работа заключается в поиске сотрудников в компанию, например через сеть LinkedIn. Чтобы стать рекрутером, необходимо поверхностно ориентироваться в видах программного обеспечения, а также знать область применения основных языков программирования и фреймворков.</p><p>Как видите, вполне реально стать Рекрутером или мануальным тестировщиком без предварительного опыта в IT-сфере. Начните с одной из этих двух профессий, а после нескольких лет работы вам будет виднее сможете хотите ли вы кардинально менять направление или нет. </p>","Created":{"$date":{"$numberLong":"1575921600000"}},"Description":"Программисты - это далеко не единственные высокооплачиваемые представители IT-компаний. Разбираемся с целым списком других профессий.","Type":{"$numberInt":"1"},"CommentsCount":{"$numberInt":"2"},"Views":{"$numberInt":"242"},"WhoDisliked":[],"WhoLiked":["5de3a5147dd2f600019789ba","5e3803a5a8ca930001e0f0a7"],"Tags":["itcompany","carrier"]}
{"_id":{"$oid":"5dedfe64264c0bcdadd16828"},"Title":"Простыми словами о понятии Баг в программировании","Url":"prostymi-slovami-o-ponyatii-bag-v-programmirovanii","Text":"<p>Никакие программы будь то приложение на смартфоне, веб-сайт или операционная система не застрахованы от появления в них багов. Баг или дефект - это отклонение в поведении программы от установленной нормы. А нормой является требование заказчика либо просто требование здравого смысла.</p>{ad}<ul>Вот некоторые примеры багов: <li>Пользователь кликает по ссылке “перейти” на сайте, но ничего не происходит в ответ</li><li>Некоторая кнопка во всех браузерах имеет красный цвет, а в Internet Edge она черная</li><li>Пользователь вводит правильные логин и пароль, но система его не пускает</li></ul><p><img src='https://storage.googleapis.com/youit/images/bag-w-programmirowanii.png' class='image-in-post' alt='Баги в программировании' /></p><p>Рассмотренные выше примеры багов относятся к таким очевидным багам, где любой бы человек заподозрил бы что-то неладное. Для этого необходимо просто обладать определенной долей здравого смысла.</p><p>К другой категории багов относятся такие, при которых программы с точки зрения здравого смысла обладают абсолютно адекватным поведением, но которое не соответствует требованиям заказчика. Например: </p><ul><li>По требованиям заказчика пользователь должен быть заблокирован в системе после 5 неправильных попыток ввести пароль, а по факту он блокируется уже после 3 попыток. </li></ul><h3>Как борются с багами</h3><p>Поиском багов занимаются мануальные тестировщики либо автоматизаторы. Все найденные баги подробно описываются в специальных баг-трекинг, одной из самых популярных является Jira. Впоследствии исправлением багов занимаются программисты, после чего вновь выполняется тестирование с целью проверить исправил ли программист баг, а также проверить не поломал ли он никакой другой функциональности. Обычно программный продукт к моменту своего релиза является тщательно оттестированным и не содержит багов. Однако в больших и сложных системах баги после релиза могут скрываться годами, пока случайно обнаруживаются обычными пользователями или теми же тестировщиками. </p>","Created":{"$date":{"$numberLong":"1576008000000"}},"Description":"Никакие программы не застрахованы от появления в них багов. Разбираемся с видами багов и причинами их появления.","Type":{"$numberInt":"2"},"WhoDisliked":[],"WhoLiked":["5e3803a5a8ca930001e0f0a7"],"Views":{"$numberInt":"216"},"CommentsCount":{"$numberInt":"0"},"Tags":["programming","quality"]}
{"_id":{"$oid":"5df0d0b3264c0bcdadd26131"},"Title":"Джуниор программист с 10 годами опыта. Бред?","Url":"junior-programmer-s-10-godami-opyta-raboty-bred","Text":"<p>Мне приходится часто слышать на работе то, что уровень программиста, его профессионализм и соответственно ожидания к нему формируют при помощи такого показателя как количество отработанных программистом лет. Например, можно услышать такую фразу:</p><p><i>“У него 6 лет опыта работы, значит он Senior”</i></p> или <p><i>“Он работает уже 10 лет, следовательно может руководить проектом”. </i></p><p>Имеют ли смысл данные утверждения? Давайте разбираться.</p>{ad}<p>Работодатель, оценивающий уровень сотрудника а соответственно и уровень его зарплаты рискует очень сильно ошибиться и нанять на работу некомпетентного сотрудника, от которого будут лишь одни убытки. </p><h3>Правило предоставленного шанса</h3><p>Существует одно простое, но важное правило, о котором нужно помнить перед тем как оценивать программиста по количеству проработанных им лет: </p><p><b>Тот факт, что программист имеет за спиной большое количество лет опыта работы говорит лишь о том, что программист имел время и возможность получить ценные знания и навыки, но никак не говорит о том, смог ли он в действительности воспользоваться своим шансом.</b></p><p>Существуют программисты, которые по различным причинам годами сидят на одном проекте и занимаются в основном только исправлением мелких дефектов. В таком случае миф про джуниоров с 10 годами опыта приобретает реальные очертания. Безусловно, что это дело каждого человека как ему развиваться и нужно ли ему развитие как таковое. Кого-то устраивает текущая зарплата, кому-то комфортно годами работать с устаревшими системами, которые разработаны на невостребованных более на рынке технологиях. Человек сам способен оценить что ему нужно и если ему нужен рост, то он разберется как его получить.</p><p>В свою очередь работодателю или техническому эксперту для оценки реального уровня кандидата, необходимо говорить с ним о его опыте работы: спрашивать какие задачи он решал, как именно он их решал, какие он видит недостатки своих решений и какие способы их устранения существуют. Последние два пункта особенно важны, так как недостатки существуют абсолютно в любом решении - все зависит только от того с какой стороны посмотреть. И если для программиста его решение является идеальным на все случаи жизни, то это говорит не о его мастерстве, а лишь о “тунельности” его мышления и неспособности мыслить критически.</p><p>Полученные ответы о опыте интервьюер должен сопоставлять с теми задачами, которые необходимо решать его компании сейчас или в обозримом будущем для понимания того подходит ли человек или нет. А вот количеству лет опыта большого значения придавать не стоит. </p>","Created":{"$date":{"$numberLong":"1576026000000"}},"Description":"Могут ли программисты, имеющие за спиной 10 лет опыта, оставаться джуниорами?","Type":{"$numberInt":"2"},"WhoDisliked":[],"WhoLiked":["5ddfa425048adc0001295115","5e0606ca5e08b5000155f62b","5e3803a5a8ca930001e0f0a7"],"Views":{"$numberInt":"437"},"CommentsCount":{"$numberInt":"0"},"Tags":["rabotaprogrammista"]}
{"_id":{"$oid":"5df29dda264c0bcdadd2d6f1"},"Title":"Как долго нужно учиться с нуля до должности Trainee Software Engineer","Url":"kak-dolgo-nuzhno-uchitsya-s-nulya-do-dolzhnosti-trainee-software-engineer","Text":"<p>Сколько времени нужно учиться с нуля до должности Trainee Software Engineer? Я уверен, что подобным вопросом задаются все люди, которые поставили перед собой цель стать программистом. Напомню, что должность Trainee Software Engineer подразумевает наличие хороших теоретических знаний языка программирования, стандартов кодирования и принципов объектно-ориентированного программирования, а также общих знаний в ряде сопутствующих технологий и фреймворков.</p>{ad}<h3>Не оффлайн-обучением единым</h3><p>Продолжительность приобретения подобного багажа знаний конечно будет зависеть от выбранного направления в программировании и самих способностей человека. Когда-то давно продолжительность обучения также зависела исключительно от присутствия за плечом наставника в виде преподавателя, репетитора или просто знакомого опытного программиста. Однако на сегодняшний день в интернете существует масса исчерпывающих, прекрасно структурированных онлайн-курсов обучения, с возможностью задавать вопросы их авторам или другим начинающим программистам. Например, вы можете пользоваться такими отличными ресурсами как <a href=”https://www.codecademy.com/” target=”_blank”>www.codecademy.com</a> или <a href=”https://www.bitdegree.org” target=”_blank”>www.bitdegree.org</a>. Также вы можете самостоятельно найти еще массу подобных и главное не скупитесь на платную подписку, которые обычно открывают намного больше возможностей обучения, чем бесплатные версии.</p> <p>И помните, что самым главным фактором, влияющим на продолжительность обучения, является ваша систематичность и количество времени, которое вы можете выделять ежедневно. Если вы готовы тратить на свое обучение по два-три часа в день ежедневно с одним выходным в неделю, то продолжительность обучения до позиции Trainee Software Engineer займет у вас не более полутора лет, которые должны быть наполнены изучением теории с регулярными вкраплениями практики. </p><h3>Что и как нужно учить?</h3><p>Начните изучение с языка программирования и его основных команд. Откройте соответствующую книгу по языку программирования, изучите первую главу и напишите как можно больше простых, пусть и бессмысленных программ, используя полученные знания. Если сперва не получается написать программу самому, то перепишите из книги готовые примеры программ и сделайте в них самостоятельно так много изменений как только сможете, расширьте программу новыми командами и функциональностью. Переходите к изучению второй главы и снова повторите практику. К третьей и так далее.</p> <p>Когда вы почувствуете уверенность в работе с такими конструкциями как переменные, массивы, циклы, методы, арифметические переменные, включите в свое обучения простые алгоритмы, такие как линейный поиск, бинарный поиск, пузырьковая сортировка, сортировка вставками. Когда вы решите много задач с участием классов и объектов, включите в свою программу принципы объектно-ориентированного проектирования и простые шаблоны проектирования, таких как синглтон, декоратор, фабричный метод, строитель, фасад, медиатор и другие. </p> <p>Когда вы пройдете книгу по языку программирования и выполните сотни консольных задач, переходите к изучению интересующего вас фреймворка. Это может быть фреймворк для создания мобильных приложений или веб-сайтов. Разработайте полноценное приложение, реализуйте в нем основной функционал подобных существующих приложений и покройте его модульными тестами. По окончании этого шага Вы можете гордо называться Trainee Software Engineer.</p>","Created":{"$date":{"$numberLong":"1576173600000"}},"Description":"Сколько времени нужно учиться с нуля до должности Trainee Software Engineer?","Type":{"$numberInt":"1"},"WhoDisliked":[],"WhoLiked":["5e3803a5a8ca930001e0f0a7"],"Views":{"$numberInt":"234"},"CommentsCount":{"$numberInt":"1"},"Tags":["carrier","learning"]}
{"_id":{"$oid":"5df4fb97264c0bcdadd36f2a"},"Title":"Программист-блогер: зачем программисту вести свой блог?","Url":"programmist-blogger-zachem-programmistu-vesti-svoj-blog","Text":"<p>Программист может вести собственный блог по различным причинам. Например, с целью прославиться, с целью получать дополнительный доход или с целью утолить свою жажду в необходимости делиться знаниями с окружающими. Какую бы из всех возможных целей не преследовал бы программист, ведение собственного блога является уникальным способом самообучения.</p>{ad}<p>Подготовка контента для собственного блога, такого как, статьи на определенные темы позволит вам структурировать и упорядочить у себя в голове то, что вы уже знаете и выучить новое. Причем я гарантирую, что достаточно часто при попытке написать статью на казалось бы хорошо знакомую вам тему вы можете испытывать сложности. Процесс изложения технических знаний “на бумаге” покажет вам, что на самом деле не так то и хорошо и не в полном объеме владеете темой. Одним из главных критериев понимания материала является способность доступно объяснить его другому человеку.</p> <p>Начинающим блогерам, можно дать три небольших рекомендации:</p><h3>#1 Не только Senior’ы пишут блоги</h3><p>Не обращайте внимания на свой уровень технический уровень, он не должен быть для вас оправданием не писать свой блог. Если вы опытный программист, пишите о интересных задачах которые вы решали или раскрывайте людям смысл интересующих их тем, например ООП, функциональное программирование, сборка мусора и т.д. Если вы начинающий программист, пишите о том что вы уже выучили, например, о необходимости переменных, недостатках пузырьковой сортировки, сравнении линейного и бинарного поисков и т.д. Помните то, что вне зависимости от вашего уровня вы сможете найти своего читателя и производить для него полезный контент.</p><h3>#2 Сбор и анализ информации</h3><img src='https://storage.googleapis.com/youit/images/informacia.png' class='image-in-post' alt='Информация' /><p>Вашей первоочередной целью должна быть качественная статья. После того как вы определились с темой статьи, не приступайте немедленно к ее написанию. Сначала прочтите как можно больше информации на выбранную тему в книгах, статьях других блогеров или обучающих видео-роликах. После проведенного исследования имеющихся материалов составьте план своей статьи и начните раскрывать пункт за пунктом пока статья не будет закончена.</p><h3>#3 Критерий завершенности – статья нравится автору</h3><p>Написанная вами статья должна вам нравиться. И после выполнения этого условия статья может быть представлена общественности. Для того, чтобы максимально объективно оценить собственный материал, забудьте о нем где-то дней на 5-7 после завершения работы над ним. А по прошествии этого срока перечитайте свою статью, вы гарантировано захотите отредактировать некоторые моменты, которых вы не заметили ранее из-за “замыленных глаз”.</p><p>На этом все. Попробуйте написать небольшую статью прямо сейчас, это будет очень интересно.</p>","Created":{"$date":{"$numberLong":"1576285200000"}},"Description":"Программист может вести собственный блог по различным причинам. Например, с целью прославиться, с целью получать дополнительный доход или с целью утолить свою жажду в необходимости делиться знаниями с окружающими.","Type":{"$numberInt":"1"},"WhoDisliked":[],"WhoLiked":["5e3803a5a8ca930001e0f0a7"],"Views":{"$numberInt":"189"},"CommentsCount":{"$numberInt":"0"},"Tags":["learning"]}
{"_id":{"$oid":"5df6687e264c0bcdadd3d7f2"},"Title":"Как программисту правильно саморазвиваться?","Url":"kak-programmistu-pravilno-samorazvivatsya","Text":"<p>В саморазвитии, то есть в регулярном поглощении новых знаний, испытывают потребность не все программисты. Кто-то возможно уже ощущает себя достаточно “саморазвитым” и хочет переключить свою энергию на другие жизненные занятия. Кто-то имеет возможность регулярно менять проекты и решать самые разносторонние задачи ежедневно, что не видит необходимости тратить свое свободное время на еще большее развитие. Если вы не относитесь ни к первой, ни к второй категории людей и чувствуете необходимость развиваться постоянно, то вам нужно определиться как именно вы будете это делать, чтобы получить максимальную для себя выгоду.</p>{ad}<h3>Краткосрочный и долгосрочный план</h3><p>Начните с составления краткосрочного и долгосрочного планов саморазвития. Учтите, что сделать вы должны это самостоятельно, ведь вопрос саморазвития является крайне субъективным: то, что идеально подходит одному человеку далеко не обязательно подойдет другому. Наличие планов позволит вам не шататься из стороны в сторону, а идти прямым и кратчайшим путем. Под долгосрочным планом имеется ввиду план на год-два, а под краткосрочным - план на 1-3 месяца. Ваш долгосрочный план может не иметь четких деталей и выглядеть следующим образом:</p><i><ul><li>Выучить алгоритмы и структуры данных</li> <li>Выучить функциональный язык программирования</li> <li>Выучить шаблоны построения микросервисных систем</li></ul></i> <p>В свою очередь краткосрочный план должен фокусироваться на одной из тем долгосрочного, иметь конкретные подтемы для обучения и ссылки на необходимые обучающие материалы. Например, возьмем такую тему из долгосрочного плана как алгоритмы, для которой краткосрочный план может выглядеть следующим образом:</p> <i><ul><li>Выучить как оценивать сложность алгоритмов, Big O нотация</li><li>Выучить внутреннее устройство хеш-таблиц</li><li>Выучить алгоритмы обхода бинарных деревьев DFS и BFS</li><li>Выучить виды графов и алгоритмы поиска кратчайшего расстояния</li><li>Учить по курсу на Coursera, Robert Sedgewick</li></ul></i><h3>Баланс между теорией и практикой</h3><img src='https://storage.googleapis.com/youit/images/balans-teoria-praktika.png' class='image-in-post' alt='Баланс между теорией и практикой' /><p>После того, как оба плана готовы и вы уже начали по ним движение, то нащупайте свой баланс между теорией и практикой. Кто-то предпочитает сначала зачитываться в теорию и практиковаться только после того, как вся теория окончательно впитана в голову. Кто-то начинает сразу с практики и обращается к теории только при возникновении препятствий. Здесь нет правильного или неправильного подхода. Есть только подход, который больше соответствует лично вам и найти его можно только в процессе обучения постоянно экспериментируя.</p><h3>Систематичность обучения</h3><p>Внедрите обучение в свой образ жизни и учитесь систематически. Человек, который увлекается тренажерным залом, ходит в него трижды в неделю и занимается по полтора часа регулярно в течение многих лет. С самообучением должно быть точно также. Найдите свою схему, выберите подходящий для себя режим и строго придерживайтесь его. </p><p>Спустя некоторое время с момента начала занятий строго по графику, вы уже не сможете прожить и нескольких дней без дозы новых знаний.</p><h3>Сначала фундаментальные знания</h3><p>Всегда делайте акцент на фундаментальных знаниях, по той причине что они не устаревают, всегда оставаясь актуальными. Также хорошие фундаментальные знания намного упростят изучение новых языков программирования, фреймворков и т.д. Если вы планируете свой долгосрочный план, то лучше включите в него в первую очередь набор фундаментальных знаний, такие как, алгоритмы, структуры данных, шаблоны проектирования, принципы объектно-ориентированного и функционального программирования, чем очередной фреймворк или инструмент.</p><h3>Выгода в долгосрочной перспективе</h3><img src='https://storage.googleapis.com/youit/images/dolgosrochnaya-perspetiva.png' class='image-in-post' alt='Выгода в долгосрочной перспективе' /><p>Важно также осознать и смириться с тем фактом, что от саморазвития вы не получите мгновенной выгоды. Вам вряд ли поднимут зарплату после прочтения книги по шаблонам проектирования или даже после получения сертификата. Однако в долгосрочной перспективе выгода однозначно будет внушительной, которая будет выражена в виде высоких должностей и зарплат, умных коллег, командировок и прочих приятных наград, ради которых стоит сделать самообучение частью своего образа жизни.</p>","Created":{"$date":{"$numberLong":"1576418400000"}},"Description":"Саморазвиваться необходимо правильно. Саморазвитие требует краткосрочного и долгосрочного планов, режима и акцента на фундаментальных знаниях.","Type":{"$numberInt":"1"},"WhoDisliked":[],"WhoLiked":["5de3a5147dd2f600019789ba","5e3803a5a8ca930001e0f0a7"],"Views":{"$numberInt":"329"},"CommentsCount":{"$numberInt":"1"},"Similar":[{"Title":"Джуниор программист с 10 годами опыта. Бред?","Url":"junior-programmer-s-10-godami-opyta-raboty-bred"},{"Title":"Как долго нужно учиться с нуля до должности Trainee Software Engineer","Url":"kak-dolgo-nuzhno-uchitsya-s-nulya-do-dolzhnosti-trainee-software-engineer"}],"Tags":["learning"]}
{"_id":{"$oid":"5df6a069264c0bcdadd3ec33"},"Title":"Современные парадигмы программирования","Url":"sovremennye-paradigmy-programmirovaniya","Text":"<p>Если вы начали интересоваться программированием, то наверняка уже успели встретить такое понятие как “парадигма” или словосочетание “парадигма программирования”. Что именно означает “парадигма” в контексте программирования и какие современные парадигмы существуют сегодня? Давайте разбираться.</p>{ad} <p>Парадигмой является набор устоявшихся идей и принципов, по которым осуществляется проектирование кода компьютерных программ. Парадигма - это определенный способ и направление мышления программиста, которое он использует в разработке. Если объяснить на более простом примере, то представьте себе ученого-физика. Все свои расчеты он выполняет исходя из того, что существует гравитация, то есть можно сказать: “Физик мыслит парадигмой гравитации”. Если физик отправится выполнять свои расчеты в место без гравитации, то ему будет не просто перестроить свое мышление для работы, ведь всю свою карьеру он мыслил исключительно парадигмой гравитации.</p><h3>ООП и ФП</h3><p>На сегодняшний день существуют две ключевые парадигмы в программировании, а именно парадигма объектно-ориентированного программирования и парадигма функционального программирования. Каждая из парадигм включает в себя свои конкретные языки программирования. Например, к объектно-ориентированной парадигме относятся такие языки как C#, Java, C++, а к функциональным - Haskell, Erlang, F#.</p><p>Из двух парадигм нельзя выделить лучшую или худшую. Каждая из парадигм предназначена для решения задач разных типов. Например, для работы с BigData больше подходит функциональная парадигма, а для разработки Enterprise систем - объектно-ориентированная.</p><p>К главным элементам объектно-ориентированных языков программирования относятся следующие:</p><ul><li>Абстракция</li><li>Инкапсуляция</li><li>Наследование</li><li>Полиморфизм</li></ul><p>Главными элементами функциональных языков являются: </p><ul><li>Функции высшего порядка</li><li>Чистые функции</li><li>Рекурсия</li><li>Иммутабельность</li></ul> <p>При использовании объектно-ориентированных языков, программист мыслит понятиями “класс”, “объект” и “метод”, а в функциональных - понятием “функция”. В первом случае программист для реализации задачи проектирует классы, наделяет их поведением в виде методов и продумывает взаимодействие между объектами классов. В случае с функциональными языками, программист проектирует небольшие функции для решения задач и объединяет их в более комплексные механизмы. </p><p>Стоит отметить, что четкого разграничения между двумя парадигмами не существует. Принципы функциональной парадигмы активно применяются и имплементируются в объектно-ориентированных языках программирования, поэтому сегодняшний разработчик скорее занимается так называемым мультипарадигмальным программированием.</p>","Created":{"$date":{"$numberLong":"1576436400000"}},"Description":"Парадигмой является набор устоявшихся идей и принципов, по которым осуществляется проектирование кода компьютерных программ. Парадигма - это определенный способ и направление мышления программиста, которое он использует в разработке.","Type":{"$numberInt":"1"},"WhoDisliked":[],"WhoLiked":[],"Views":{"$numberInt":"164"},"CommentsCount":{"$numberInt":"0"},"Similar":[{"Title":"Причины появления спагетти-кода","Url":"prichiny-poyavleniya-spagetti-koda"},{"Title":"Простыми словами о понятии Баг в программировании","Url":"prostymi-slovami-o-ponyatii-bag-v-programmirovanii"}],"Tags":["programming"]}
{"_id":{"$oid":"5df9e2b8264c0bcdadd4e43b"},"Title":"Насколько хорошо junior программист должен знать язык программирования","Url":"naskolko-horosho-junior-programmist-dolzhen-znat-yazyk-programmirovaniya","Text":"<p>В изучение какого-либо языка программирования можно погружаться и погружаться до бесконечности.  Для нащупывания некоего подобия дна может потребоваться огромное количество времени, которое измеряется годами. Но всему должен быть <a href='https://youit.pro/post/kak-dolgo-nuzhno-uchitsya-s-nulya-do-dolzhnosti-trainee-software-engineer'>свой предел и свои границы</a>, которые должны варьироваться от целей программиста и ожиданий к нему.</p>{ad}<p>Для начинающих junior программистов, как и для всех остальных, границы обучения языка программирования имеют более-менее четкие очертания, зная которые можно не погрязнуть в бесконечном штудировании учебников, видео-курсов и прочих обучающих источников. Итак, как же можно самостоятельно в домашних условиях определить что вы выучили язык программирования на уровне junior программиста? Давайте разбираться.</p><h3>Выбор книги по языку программирования</h3><img src='https://storage.googleapis.com/youit/images/books.png' class='image-in-post' alt='Книги' /><p>Итак, чтобы ваши знания языка программирования соответствовали знаниям junior разработчика, вам необходимо понимать каждую тему и каждую конструкцию языка, которые описаны в книгах по языка программирования для начинающих. Например, если речь идет о языке C#, то вам подойдет книга <a href=” http://www.albahari.com/nutshell/” target=”_blank”>C# 7.0 in a Nutshell</a> где-то с первой до 17й главы. Если речь о языке JavaScript, то вам подойдет часть №1 онлайн справочника <a href=”https://javascript.info/” target=”_blank”> javascript.info</a>. Если вы учите другие языки программирования то воспользуйтесь помощью Google для поиска необходимой вам книги сформировав запрос следующим образом:</p><p><i>“Книга по <ваш язык программирования здесь> для начинающих”</i></p><p>Но теперь у вас может возникнуть другой вопрос: насколько глубоко необходимо знать каждую из тему/каждую программную конструкцию языка программирования, описанную в учебнике? Например, если речь идет о функциях, то достаточно ли знать только их синтаксис? Или необходимо также иметь общее понимание о структуре машинного кода, в который функции компилируются? Если речь идет о делегатах, то достаточно ли просто знать, что это такое? Или необходимо уметь реализовать делегат самостоятельно при помощи набора примитивных программных конструкций?</p><h3>Контрольные вопросы для проверки знаний</h3><p>Чтобы упростить вам задачу, мы сформировали для вас несколько контрольных вопросов, которые вы должны задать себе (или попросить друга задать их вам) после каждой пройденной темы языка программирования. Если ответы даны, то вы знаете язык так, как его должен знать junior программист.</p><p>Итак, выберете любую конструкцию языка, например статические классы. После чего ответьте для себя на четыре следующих вопроса:</p><ul><li><u>Что такое</u> статические классы?</li><li><u>Для чего применяются</u>  статические классы?</li><li> <u>Существуют ли альтернативы</u>  статическим классам?</li><li> <u>Как выглядит синтаксис создания и работы</u> со статическими классами?</li></ul><p>Ваши ответы определенно не должны занимать страницу текста, наоборот они должны быть короткими и четко формулировать идею. Например, ответ на первый вопрос может звучать так: </p><p><i>“Статические классы это такие классы которые содержат в себе статические методы и свойства, которые могут быть вызваны напрямую через имя класса, без создания объекта”.</i></p><p>Ответ на второй вопрос может быть таким: </p><p><i>“Статические классы применяются когда необходимо создать класс не имеющий состояния, например для хранения данных конфигурационного файла.</i></p> <p>Ответ на третий вопрос: </p> <p><i>“Альтернативой статическим классам могут являться обычные экземплярные классы”.</i></p><p>И в случае с четвертым вопросом, вы просто должны знать синтаксис создания статического класса и вызова его методов и свойств в зависимости от выбранного вами языка программирования.</p><p>Каждый из вышеперечисленных четырех фундаментальных вопросов <i>“Что такое…”, “Для чего применяются…”, “Существуют ли альтернативы…”, “Как выглядит синтаксис создания и работы…”</i>  вы должны задать себе на каждую тему/конструкцию изучаемого вами языка программирования, такие как переменные, константы, строки, условия, циклы, методы, классы, интерфейсы, делегаты, события, сборки и так далее. Как только вы сможете уверенно отвечать на четыре вопроса для всех тем выбранного вами учебника - вы знаете язык программирования на уровне <a href='https://youit.pro/post/v-chem-raznitsa-mezhdu-junior-middle-i-senior-programmistami'>junior программиста</a>.</p>","Created":{"$date":{"$numberLong":"1576699200000"}},"Description":"Для того чтобы junior программист понял достаточно хорошо ли он выучил язык программирования, достаточно задать себе четыре контрольных вопроса.","Type":{"$numberInt":"1"},"WhoDisliked":[],"WhoLiked":["5ddfa425048adc0001295115","5ddfe9e6048adc000129511e","5de3a5147dd2f600019789ba"],"Views":{"$numberInt":"477"},"CommentsCount":{"$numberInt":"0"},"Similar":[{"Title":"Джуниор программист с 10 годами опыта. Бред?","Url":"junior-programmer-s-10-godami-opyta-raboty-bred"},{"Title":"Junior developer, повышаем твои шансы на прохождение собеседования","Url":"junior-developer-povishayem-tvoi-shansy-na-prokhozhdeniye-sobesedovaniya"},{"Title":"Как найти работу программиста без опыта?","Url":"kak-programmistu-bez-opyta-nayti-rabotu"}],"Tags":["learning","programming","junior"]}
{"_id":{"$oid":"5dfb98f5264c0bcdadd56ef9"},"Title":"Мысли вслух о творчестве в программировании","Url":"mysli-vslukh-o-tvorchestve-v-programmirovanii","Text":"<p>Существует утверждение, что программирование относится к категории творческих профессий, а <a href='/post/pishut-li-programmisty-kod'>процесс написания кода</a> по количеству творчества в нем схож с написанием пейзажей или рекламных лозунгов. Реальность заключается в том, что доля творчества в программировании действительно присутствует, однако она крайне мала и постепенно уменьшается по мере развития IT-индустрии и в конце концов может вовсе раствориться. Хорошо это или плохо и почему так происходит давайте разбираться.</p>{ad}<p>Творчество в программировании - это возможность находить и реализовывать нестандартные решения, которые еще нигде не были задокументированы ранее. Когда программист встречается с некоторой задачей в программировании то у него есть два пути. Путь номер один - это провести исследование с целью нахождения готового решения своей задачи. Искать можно в книгах, официальной документации и других профессиональных источниках. Путь номер два - это придумать свое собственное решение задачи. Процесс номер один практически полностью исключает из работы творчество, за исключением того маленького этапа, когда программист адаптирует найденное стандартное решение под свой конкретный случай. Процесс номер два является действительно творческим, что определенно радует правое полушарие программиста.</p><img src='https://storage.googleapis.com/youit/images/programmirovanie-za-stolom.png' class='image-in-post' alt='Программирование за столом возле окна' /><p>Какой же из двух процессов лучше? Творческий подход действительно уместен в некоторых случаях, например при возникновении реально сложных задач, которые еще не были никем решены. Однако на сегодняшний день появление таких задач скорее является исключением из правил, так как IT-индустрия активно развивается, документируются принципы, правила, рекомендации и шаблоны для решения тысяч и тысяч задач которые могут всплыть. Связь между уровнем развития IT и творчеством в нем является обратно пропорциональной - чем больше развито IT, тем меньше места для творчества в нем остается. Как результат, по состоянию на сегодняшний день необходимость изобретать велосипед появляется совсем не часто.</p><p>То творчество которое можно встретить в современной разработке часто звучит в негативном контексте. Ведь большой процент программистов хотят решать задачи творчески, однако только у небольшой части программистов творческие решения получаются действительно достойными. Большая часть творческих решений имеют крайне низкое качество. А если даже и с качеством все в порядке, то код решения может быть <a href='/post/prichiny-poyavleniya-spagetti-koda'>крайне громоздким и запутанным</a> для коллег по команде.</p><p>Активное творчество как правило свойственно начинающим программистам, которые еще не успели изучить толстые тома документации и пытаются решить задачу своими силами. Однако как правило такие решения бракуются старшими программистами на code review и впоследствии код полностью переписывается в соответствии со стандартами разработки.</p><p>Как видим, творчество в программировании действительно уместно далеко не в повседневной работе. Регулярное творчество от программиста как правило говорит либо о его неопытности, либо о простой нехватке времени на поиск существующего задокументированного решения.</p>","Created":{"$date":{"$numberLong":"1576756800000"}},"Description":"Существует утверждение, что программирование относится к категории творческих профессий, а процесс написания кода по количеству творчества в нем схож с написанием пейзажей или рекламных лозунгов. Так это или нет?","Type":{"$numberInt":"1"},"WhoDisliked":[],"WhoLiked":["5ddfa425048adc0001295115"],"Views":{"$numberInt":"130"},"CommentsCount":{"$numberInt":"0"},"Similar":[{"Title":"Программист-блогер: зачем программисту вести свой блог?","Url":"programmist-blogger-zachem-programmistu-vesti-svoj-blog"},{"Title":"Cленг программистов в IT","Url":"sleng-programmistov-v-it"}],"Tags":["programming"]}
{"_id":{"$oid":"5dfba455264c0bcdadd574b6"},"Title":"Что необходимо минимально знать каждому хорошему программисту?","Url":"chto-dolzhen-minimalno-znat-kazhdyj-khoroshij-programmist","Text":"<p>Задумывались ли вы что отличает рядового программиста от хорошего программиста? Кто-то скажет, что хороший программист должен углубленно владеть своим основным языком программирования. Кто-то скажет про способность быстро и в срок выполнять поставленные задачи. Кто-то увяжет крутость программиста только с количеством языков программирования, фреймворков и библиотек, которыми тот владеет. Все эти утверждения с одной стороны имеют свою долю правды, но с другой стороны каждое из них может быть без проблем оспорено.</p>{ad}<p>Cуществует еще один интересный критерий, который отличает хорошего программиста от рядового. И с корректностью этого критерия соглашаются большинство опытных программистов. Он звучит следующим образом:</p> <p class='cite'>“Хороший программист это тот программист, который твердо владеет фундаментальными знаниями.”</p> <p>К разряду фундаментальных относятся такие знания, которые не устаревают с течением времени и на базы которых создаются десятки различных инструментов для разработки программного обеспечения. Следовательно, фундаментальные знания не имеют границ в виде языков программирования и технологий, либо эти границы достаточно широки.</p><p>Давайте взглянем на перечень таких фундаментальных знаний, которые являются важными для каждого без исключения программиста, вне зависимости от его специализации и предпочтений.</p><h3>Структуры данных и Алгоритмы</h3><p>Важно понимать принципы построения и работы таких структур данных как Массив (Array), Стек (Stack), Очередь (Queue), Cписок (List), Хеш-таблица (Hashtable), Дерево (Tree), Граф (Graph). Необходимо ориентироваться в различных подвидах перечисленных структур. Например, не помешает знать, что списки существуют односвязные и двусвязные, а графы бывают ориентированные и неориентированные. Также знать когда и какую структуру данных или ее подвид необходимо использовать для самого оптимального выполнения решаемой задачи.</p><p>К основным алгоритмам, которые необходимо понимать всем программистам, относятся линейный поиск, бинарный поиск, быстрая сортировка, сортировка слиянием, поиск в глубину и в ширину. Необходимо знать основные битовые операции, уметь писать рекурсивные алгоритмы. Также необходимо понимать Big O нотацию и знать разницу между O(1), O(log n), O(n), O(n квадрат 2).</p><p>Хорошее знание <a href='https://www.coursera.org/specializations/data-structures-algorithms' target='_blank'>алгоритмов и структур данных</a> позволит вам уверенно решать задачи, опираясь на проверенные десятилетиями решения. Вам код будет лаконичен и легко читаемым (для тех кто также знает алгоритмы), а его быстродействие может в десятки раз превосходить код, написанный программистом без знания алгоритмов и структур данных.</p><h3>Принципы ООП и ФП</h3><p>Владение принципами объектно-ориентированного программирования или ООП сложно переоценить. Абстракция, Инкапсуляция, Наследование и Полиморфизм. Четыре принципа которые хороший программист должен уметь легко разъяснить любому встречному человеку (не обязательно техническому) без долгих раздумий и сомнений. Помимо этих принципов, также необходимо понимать разницу между агрегацией и композицией, знать принципы сильного сцепления (High Cohesion) и слабой связанности (Low coupling), а также принцип Модульности (Modularity).</p><p>Понимание принципов функционального программирования необходимо даже тем программистам, которые планируют всю свою жизнь использовать исключительно объектно-ориентированные языки. По состоянию на сегодняшний день, немалое количество принципов функционального программирования, такие как чистые функции, неизменяемость или функции высшего порядка могут легко быть имплементированы программистом в языках <a href='/post/sovremennye-paradigmy-programmirovaniya' target='_blank'>объектно-ориентированной парадигмы</a>, что сделает код более читабельным, эффективным и легко расширяемым.</p><h3>SOLID и шаблоны проектирования</h3><p>Принципы SOLID чрезвычайно важны, так как их знание позволяет значительно сузить количество неправильных способов проектирования программного кода. Аббревиатура SOLID используется для обозначения пяти принципов проектирования программных систем, таких как принцип единой ответственности, принцип открыт/закрыт, принцип подстановки Лисков, принцип разделения интерфейсов и принцип инверсии зависимостей.</p><p>Шаблоны проектирования решают ту же проблему, что и принципы SOLID – направляют программиста в правильную сторону при проектировании кода. Из огромного количества существующих шаблонов в первую очередь можно выделить те 23 шаблона, которые были впервые описаны в книге банды четырех. Многие из этих шаблонов повсеместно применяются при разработке ПО. Знание шаблонов как и знание алгоритмов позволяет не изобретать велосипед при написании кода. Также шаблоны дают программистам возможность общаться между собой на “одном языке”. К ключевым шаблонам, которыми точно необходимо владеть, можно отнести следующие:</p><ul><li>Синглтон</li><li>Фабричный метод</li><li>Адаптер</li><li>Прокси</li><li>Стратегия</li><li>Декоратор</li><li>Фасад</li></ul><h3>Выводы</h3><p>Все вышеизложенные темы являются фундаментом для изучения большого количества всевозможных языков программирования, принципов работы фреймворков, архитектурных шаблонов, шаблонов корпоративных приложений и многого другого. Поэтому всегда в свободное время отдавайте предпочтение изучению фундаментального материала, вместо очередного фреймворка. В долгосрочной перспективе вы точно останетесь в выигрыше.</p>","Created":{"$date":{"$numberLong":"1576756860000"}},"Description":"Задумывались ли вы что отличает рядового программиста от хорошего программиста? Углубленное владение языком программирования? Знание фреймворков? Наличие фундаментальных знаний?","Type":{"$numberInt":"1"},"WhoDisliked":[],"WhoLiked":["5ddfa425048adc0001295115"],"Views":{"$numberInt":"339"},"CommentsCount":{"$numberInt":"0"},"Similar":[{"Title":"Не дается обучение программированию?","Url":"ne-dayetsya-obucheniye-programmirovaniyu"},{"Title":"Junior C#! Не иди на собеседование, если не знаешь ответов на такие вопросы","Url":"junior-csharp-ne-idi-na-sobesedovaniye-esli-ne-znayesh-otvetov-na-takiye-voprosy"}],"Tags":["learning","programming","algorithms","oop"]}
{"_id":{"$oid":"5dfd14e8264c0bcdadd5deec"},"Title":"Что такое Hello World в программировании?","Url":"hello-world-v-programmirovanii","Text":"<p>Hello World - это не вступительная фраза президента США на генассамблее ООН и не первое обращение инопланетян к землянам в фильме “День независимости”. Hello World - это первая программа каждого программиста, которую они пишут в самом начале своего обучения. Как правило, ни один план обучения в компьютерных академиях не обходится без написания Hello World’а.</p>{ad}<p>Традиция писать Hello World в качестве первой программы зародилась еще в 70х годах прошлого века и с тех пор прочно укоренилась во всех учебниках программирования и планах обучения в независимости от языка и специализации. Смысл программы Hello World заключается в том, что в окно программы при запуске выводится всего лишь единственное сообщение ‘Hello World’. И на этом все. Какая либо иная функциональность в программе отсутствует. Безусловно, такая программа является самой простой программой из всех возможных. Она состоит всего из одной единственной команды вывода текста в консоль и самой строки (строкового литерала).</p><p>Вот как выглядит код программы “Hello World” на самых популярных языках программирования:</p><table class='two-cols'><tr><th>Язык</th><th>Реализация</th></tr><tr><td>C#</td><td>Console.WriteLine(“Hello World!”);</td></tr><tr><td>Java</td><td>System.out.println(&quot;Hello World!&quot;);</td></tr><tr><td>JavaScript</td><td>alert(&quot;Hello World!&quot;);</td></tr><tr><td>Python</td><td>print(&quot;Hello World!&quot;) </td></tr><tr><td>Ruby</td><td>puts &quot;Hello World!&quot;</td></tr><tr><td>Go</td><td>fmt.Println(&quot;Hello World!&quot;);</td></tr><tr><td>C++</td><td>cout << “Hello World!”;</td></tr></table><p>По причине примитивности программы Hello World, программисты часто используют ее в своих разговорах, когда нужно дать понять, что поставленная задача является очень простой, например:</p><p class='cite'>“Я сделаю валидацию данных за пять минут, это не сложнее Hello World”.</p><p>или</p> <p class='cite'>“Я ухожу с этого проекта, мне уже надоело решать задачи уровня Hello World”.</p><p>Предлагаем вам прямо сейчас самостоятельно написать Hello World, если вы еще этого не сделали. Это будет очень просто и забавно.</p>","Created":{"$date":{"$numberLong":"1573416000000"}},"Description":"Что такое Hello World в программировании?","Type":{"$numberInt":"1"},"Views":{"$numberInt":"173"},"CommentsCount":{"$numberInt":"1"},"WhoDisliked":[],"WhoLiked":["5e3803a5a8ca930001e0f0a7"],"Tags":["programming"]}
{"_id":{"$oid":"5dfd1f16264c0bcdadd5e44f"},"Title":"Что такое Энтерпрайз разработка?","Url":"chto-takoe-enterprajz-razrabotka","Text":"<p>Одним из востребованных направлений разработки программного обеспечения на сегодняшний день является Энтерпрайз разработка. Слово Энтерпрайз может встретиться в описании вакансии на LinkedIn или при прохождении собеседования в IT-компанию. Однако несмотря на распространенность данного термина и обильное его употребление в устной речи, не все понимают понятие Энтерпрайза одинаково. Давайте разбираться что к чему.</p>{ad}<p>Для одних Энтерпрайз разработка означает работать на проектах с огромной кодовой базой. Для других Энтерпрайз означает работу обязательно с унаследованными системами. Для кого-то еще Энтерпрайз означает разработку программного обеспечения для больших корпораций. Каждое из перечисленных определений может быть увязано с термином Энтерпрайз. Однако, ни одно определение не является точным и не дает полного представления об Энтерпрайз разработке.</p><p class='read-also'>Читайте также: <a href='/post/kak-popast-v-it-kompaniyu-ne-programmistom'>Как попасть в IT компанию не программистом</a></p><h3>Энтерпрайз разработка и кровь</h3><p>Вот более точное определение Энтерпрайз разработки - Энтерпрайз разработка означает разработку программного обеспечения, предназначенного для частичной либо полной автоматизации бизнес процессов некоторой компании. К примерам Энтерпрайз проектов можно отнести банковские системы, CRM системы и другие.</p> <img src='https://storage.googleapis.com/youit/images/krovavyj-enterprajz.png' class='image-in-post' alt='Кровавый Энтерпрайз' /><p>Иногда можно услышать такое выражение как Кровавый Энтерпрайз. Такое название сформировалось по той причине, что в коде Энтерпрайз проектов зачастую &quot;без бутылки не разобраться&quot;. Местами сложный, запутанный и неподатливый к изменениям код является следствием того, что Энтерпрайз проекты разрабатываются годами, одни программисты сменяются другими, а потом третьими и так далее. В результате отсутствует человек, который бы владел полным концептуальным видением проекта и при этом контролировал выполнение работ. В итоге Энтерпрайз проекты могут <a href='/post/prichiny-poyavleniya-spagetti-koda'>смешивать в себе различные стили программирования</a>, инструменты и техники, некоторые из которых могут быть даже взаимоисключающими.</p><h3>Бесконечная разработка</h3><p>Теперь у вас мог созреть резонный вопрос. Почему Энтерпрайз проект нельзя один раз написать, отдать заказчику и больше к его разработке не возвращаться? Дело в том, что как уже упоминалось раньше, Энтерпрайз проекты автоматизируют бизнес-процессы компании, для которой они разрабатываются. И если вдруг в мире бизнеса происходят какое-то изменения (а они происходят регулярно), то их нужно немедленно реализовать в программном продукте. Простой пример: если банк вводит новый тип платежных карт, то этот тип карт должен быть доступен в банковском аккаунте пользователя. А значит необходимы как минимум программисты, которые эти платежные карты добавят в систему в интерфейс пользователя (UI), бизнес-логику приложения и базу данных. Также нужны тестировщики, которые протестируют новый функционал на корректность работы в соответствии с требованиями заказчика.</p><p class='cite'>Непрерывные изменения бизнеса влекут за собой непрерывные изменения в Энтерпрайз проекте, так как проект описывает бизнес-модели и реализует протекаемые в бизнесе процессы.</p><p> Однако несмотря на то, что Энтерпрайз он кровавый, не бойтесь его. На сегодняшний день существует огромное количество техник, правил, рекомендаций и инструментов, позволяющих успешно разрабатывать Энтерпрайз проекты, сопровождать и “реанимировать” их в случае необходимости.</p>","Created":{"$date":{"$numberLong":"1576861200000"}},"Description":"Одним из востребованных направлений разработки программного обеспечения на сегодняшний день является Энтерпрайз разработка. Но что конкретно означает понятие Энтерпрайз?","Type":{"$numberInt":"1"},"Views":{"$numberInt":"259"},"CommentsCount":{"$numberInt":"0"},"WhoDisliked":[],"WhoLiked":["5ddfa425048adc0001295115"],"Similar":[{"Title":"Мысли вслух о творчестве в программировании","Url":"mysli-vslukh-o-tvorchestve-v-programmirovanii"},{"Title":"Как попасть в IT компанию не программистом?","Url":"kak-popast-v-it-kompaniyu-ne-programmistom"},{"Title":"Какой тип IT-компании выбрать программисту?","Url":"kakoy-tip-it-kompanii-vybrat-programmistu"}],"Tags":["programming","enterprise"]}
{"_id":{"$oid":"5dff61c9264c0bcdadd6a015"},"Title":"Карьерный путь программиста от Трейни до Архитектора","Url":"karernyj-put-programmista-ot-trejn-do-arkhitektora","Text":"<p>Сегодня IT-сфера развивается достаточно активно. Одним из показателей такого бурного роста, помимо бесчисленного количества инструментов разработки или языков программирования, является немалое количество возможных технических должностей и возможных направлений карьерного роста. Давайте разберём один возможных и достаточно распространенных путей развития программиста.</p>{ad}<p>Первая ступень программиста - это должность Trainee Software Engineer. Программист уровня Trainee обычно не имеет никакого коммерческого опыта разработки, но уже имеет неплохие теоретические знания языка программирования и сопутствующих технологий, фреймворков, библиотек. До своего первого повышения по карьерной лестнице, Trainee программист работает в среднем от трех до шести месяцев под пристальным контролем старших коллег.</p><p class='read-also'>Читайте также: <a href=' /post/kak-programmistu-pravilno-samorazvivatsya'> Как программисту правильно саморазвиваться?</a></p><p>Вторая ступень - должность Junior Software Engineer. Джуниоры уже обладают небольшим опытом коммерческой разработки обычно от полугода до двух лет. Они имеют неплохое понимание простых шаблонов написания кода (Фабрики, Одиночки, Строители), знакомы с процессом разработки программного обеспечения и выполняют сложную работу под присмотром старших коллег. Однако джуниоры уже могут выполнять немало не сложных задач самостоятельно, пусть и с постоянно присутствующими сомнениями в правильности решения. На своей должности <a href='/post/junior-programmer-s-10-godami-opyta-raboty-bred'>джуниор программисты в среднем работают два-три года</a> до последующего повышения.</p><img src='https://storage.googleapis.com/youit/images/karernaya-lestnica.png' class='image-in-post' alt='Карьерная лестница программистов' /><p>Третья ступень - должность Middle Software Engineer или же как следует из названия - “середнячок”. В практическом плане мидлы уже самостоятельно могут разрабатывать отдельные фрагменты системы, за исключением чего-то большого и сложного, как например создание проекта с нуля. В теоретическом плане мидлы уже хорошо знают и применяют шаблоны проектирования, хорошо понимают основные алгоритмы и структуры данных, умеют применять многопоточность и асинхронность, могут выполнить большой рефакторинг, выходящий за рамки одного класса. На своей должности мидл программист в среднем работает два-три года до очередного повышения.</p><p>Четвертая ступень - должность Senior Software Engineer. Синьйоры уже являются достаточно матерыми программистами, которые могут разрабатывать сложные части системы, твердо обосновывать принятые решения и контролировать выполнение работы младшими коллегами. Зачастую синьоры программисты сознательно завершают движение по карьерной лестнице на своей должности. Они лишь продолжают совершенствовать свое мастерство в разработке ПО и изучать смежные направления для расширения своего кругозора или так называемого “роста в ширину”. Но при желании получить следующую должность, необходимо иметь до семи лет суммарного опыта разработки.</p><p>Пятая ступень - должность Technical Leader. Технический лидер - это человек, который руководит всей технической частью разработки проектов. Часто технический лидер исполняет роль такого себе универсального солдата, который может и функционал реализовать, и критический дефект исправить, и распределить задачи между командой, и выполненную проверить работу. На данной должности можно остановиться, как и в случае с синьорами, но если хочется идти дальше, то требуется около десяти лет суммарного опыта в разработке.</p><p>Шестая ступень - Architect. Задача архитектора заключается в создании архитектуры проекта, которой предшествует тщательный анализ функциональных и нефункциональных требований заказчика. Причем если программист в процессе своей работы производит код, то результатом работы архитектора часто является текстовый документ с набором диаграмм и рекомендаций, которые в последствии являются инструкцией для технических лидеров и синьйоров по имплементации проекта.</p>","Created":{"$date":{"$numberLong":"1577001600000"}},"Description":"Сегодня IT-сфера развивается достаточно активно. Одним из показателей такого бурного роста, помимо бесчисленного количества инструментов разработки или языков программирования, является немалое количество возможных технических должностей и возможных направлений карьерного роста.","Type":{"$numberInt":"1"},"Views":{"$numberInt":"320"},"CommentsCount":{"$numberInt":"0"},"WhoDisliked":[],"WhoLiked":["5ddfa425048adc0001295115"],"Similar":[{"Title":"Не дается обучение программированию?","Url":"ne-dayetsya-obucheniye-programmirovaniyu"},{"Title":"Насколько хорошо junior программист должен знать язык программирования","Url":"naskolko-horosho-junior-programmist-dolzhen-znat-yazyk-programmirovaniya"},{"Title":"Джуниор программист с 10 годами опыта. Бред?","Url":"junior-programmer-s-10-godami-opyta-raboty-bred"}],"Tags":["carrier"]}
{"_id":{"$oid":"5e035feb264c0bcdadd7bfe2"},"Title":"Карта знаний .NET Web программиста","Url":"dotnetweb","Text":"<p>На сегодняшний день наука разработки программного обеспечения состоит из такого большого количества тем, что сориентироваться в них трудно даже опытному программисту, не говоря уже о новичках. Именно по этой причине мы начали разработку серии <a href='/map'>“Карт знаний”</a> для программистов, которые самым детальным образом описывают все, что должны знать как новички, так и синьоры. Первым результатом нашей работы стала <a href='/map/dotnetweb'>Карта знаний .NET Web программиста</a>, которая включает в себя около 20 следующих тем: </p><ul><li>Язык программирования C#</li><li>.NET Framework / .NET Core</li><li>Контроль качества кода / Рефакторинг</li><li>Многопоточность и Асинхронное программирование</li><li>Модульное и интеграционное тестирование</li><li>Алгоритмы и Структуры Данных</li><li>Принципы объектно-ориентированного программирования (ООП) </li><li>Шаблоны и принципы проектирования, SOLID</li><li>Предметно-ориентированное проектирование (Domain-driven design, DDD) </li><li>Шаблоны уровня доступа к данным</li><li>Фреймворки доступа к данным: Entity Framework, NHibernate, Dapper</li><li>Архитектурные шаблоны и Атрибуты качества (Quality Attributes) </li><li>HTTP, REST, Веб-фреймворки: ASP.NET MVC / Web API / Core</li><li>Фронтенд разработка: JavaScript / TypeScript / SPA фреймворки</li><li>Веб-безопасность, Шифрование данных, OWASP</li><li>Распределенные системы и Микросервисная архитектура</li><li>Базы данных: T-SQL, MS SQL, NoSQL</li><li>Системы контроля версий: Git, Mercurial, TFS</li><li>Методологии разработки: Scrum, Kanban и Scrumban</li></ul><p><a href='/map/dotnetweb'>Пользуйтесь картой</a> в целях самообучения, поиска пробелов в знаниях, создания программ обучения, подготовки к собеседованиям и продвижениям по карьерной лестнице.</p> <p>Не забывайте делиться с нами своими впечатлениями, пожеланиями или рекомендациями по улучшению в комментариях или на электронный адрес <a href='mailto:admin@youit.pro'>admin@youit.pro</a>.</p> <p>Счастливого обучения!</p>","Created":{"$date":{"$numberLong":"1577304000000"}},"Description":"Детализированная карта знаний для .NET Web программистов от Trainee до Senior. Используйте для самообучения, поиска пробелов в знаниях, создания программ обучения, подготовки к собеседованиям и продвижениям по карьерной лестнице.","Type":{"$numberInt":"1"},"Views":{"$numberInt":"456"},"CommentsCount":{"$numberInt":"7"},"WhoDisliked":[],"WhoLiked":["5de3a5147dd2f600019789ba","5ddfa425048adc0001295115","5ddfe9e6048adc000129511e"],"Tags":["roadmaps","dotnet","csharp","oop","quality","testing","algorithms","js"]}
{"_id":{"$oid":"5e07417f264c0bcdadd92712"},"Title":"Как программисту писать качественный код, следуя лишь одному правилу","Url":"kak-programmistu-pisat-kachestvennyj-kod","Text":"<p>Любой современный язык программирования, будь то JavaScript, Python или C# является достаточно комплексным инструментом, который состоит из длинного списка простых и сложных составляющих. Даже небольшая задача может быть решена несколькими разными способами за счет вариаций комбинирования программных конструкций.</p>{ad}<p>Но только лишь на сложности языков программирования разговор не оканчивается. Никуда не деться от естественной сложности современных программных систем, которые могут включать в себя тысячи бизнес-правил, взаимодействие с различными хранилищами данных, интеграцию с десятками внешних систем, интерактивный дизайн и так далее. Если умножить сложность языков программирования и фреймворков на естественную сложность программных систем, в итоге получаем такого монстра, который может выйти из-под контроля в любую секунду.</p><h3>Техники борьбы со сложностью</h3><p>Для борьбы с естественной сложностью разрабатываемых программных систем уже давно существуют такие вещи как принципы объектно-ориентированного программирования, объектно-ориентированный дизайн и предметно-ориентированное проектирование. Если следовать им грамотно и без чрезмерного фанатизма, то они действительно помогают программным системам не превратиться в большой ком грязи в конечном итоге. Если говорить конкретнее, то к таким принципам относятся следующие: SOLID, Модульность, Принцип слабого сцепления/сильной связанности, Принцип инверсии зависимостей и другие.</p><p>На вышеперечисленных принципах построен длинный ряд шаблонов проектирования, к которым относятся GoF шаблоны (Декоратор, Медиатор, Посетитель и так до 23х), не GoF шаблоны (Null Object, Rules, Event Aggregator), шаблоны доступа к данным (Репозиторий, Единица работы, Спецификация, Активная запись…), шаблоны предметно-ориентированного проектирования (Сущность, Объект-значение, Доменный сервис, Агрегат, Репозиторий, Доменное событие) и прочие категории шаблонов.</p><p>Если все это добро просуммировать, то наверное получится не меньше сотни различных инструментов проектирования, подчинить которые своему уму можно только после очень долгого обучения и регулярной практике.</p><h3>Все производное от Принципа Единой Ответственности</h3><p>Если проанализировать различные принципы, шаблоны и анти-шаблоны проектирования, то немалую их часть объединяет лишь один принцип, а именно Принцип Единой Ответственности (Single Responsibility Principle). Наверное, не зря он стоит на первом месте в списке SOLID. Этот принцип говорит о том, что программный компонент (метод, класс, интерфейс, сборка, микросервис) должен реализовывать только одну задачу и иметь только одну причину для внесения в него изменения.</p><p>На принципе единой ответственности базируются например Принцип Открыт/Закрыт (Open/Closed Principle) или Принцип Разделения Интерфейсов (Interface Segregation Principle), так как следование им является следованием принципу единой ответственности в чистом виде.</p><p>На принципе единой ответственности базируется большая часть шаблонов проектирования, которые созданы именно для его соблюдения, а именно Строитель/Фабричный метод, Декоратор, Прокси, Цепочка обязанностей, Итератор, Медиатор, Состояние, Стратегия/Шаблонный метод, Правила (Rules), MVC и другие. Все перечисленные шаблоны инкапсулируют логику определенного вида. Например, шаблон Медиатор инкапсулирует логику взаимодействия нескольких объектов. Если не использовать Медиатор, то логика взаимодействия располагалась бы непосредственно во взаимодействующих между собой объектах в добавок к их основной логике, что и нарушало бы принцип единой ответственности.</p><p>Ну и наконец различные анти-шаблоны, как например God-object, слезно кричат лишь об одном: “Не нарушайте принцип единой ответственности!”.</p><h3>Как следовать Принципу Единой Ответственности</h3><p>Следовать Принципу Единой Ответственности совсем не сложно с технической точки зрения, ведь как упоминалось ранее, вы, как разработчик, должны наделять свои программные компоненты (методы, классы и т. д.) единственной обязанностью. Например,  метод не должен выполнять валидацию данных и сохранять их в базу, а класс не должен вычислять значения по некоторым формулам и генерировать pdf-документы.</p><p>В следовании принципу единой ответственности главную роль играет выбор вами четкого именования методов, классов и т. д. Имя должно четко описывать выполняемую обязанность, должно описываться одним-тремя словами и не содержать союзов ‘И’ или ‘Или’ (например, OrderPriceCalculator а не OrderPriceCalculatorAndXmlParser). Имя должно быть неким сдерживающим фактором для программиста, чтобы не впихнуть новые обязанности, которые будут выходить за рамки выбранного имени. Если, например, называть свои классы Helper, Manager, Doer, то в конечном счете в них окажется самая разнообразная логика и принцип единой ответственности будет нарушен. Но если класс будет называться например XmlFileValidator, то вряд ли у кого-то поднимется рука разместить там логику расчета налогов или стоимости заказа.</p><h3>Заключение</h3><p>Итоги очень просты – следуйте принципу единой ответственности, сделайте это своим главным приоритетом. Благодаря этому, в вашем коде начнут вырисовываться самые разнообразные шаблоны проектирования, с которыми вы даже еще не успели познакомиться.</p>","Created":{"$date":{"$numberLong":"1577527200000"}},"Description":"Ваш код может быть достаточно качественным, если следовать лишь одному принципу - Принципу Единой Ответственности.","Type":{"$numberInt":"2"},"Views":{"$numberInt":"272"},"CommentsCount":{"$numberInt":"0"},"WhoDisliked":[],"WhoLiked":["5ddfa425048adc0001295115","5ddfe9e6048adc000129511e","5de3a5147dd2f600019789ba"],"Similar":[{"Title":"Пишут ли программисты код?","Url":"pishut-li-programmisty-kod"},{"Title":"Причины появления спагетти-кода","Url":"prichiny-poyavleniya-spagetti-koda"},{"Title":"Нужны ли программисту сертификаты?","Url":"nuzhny-li-programmistu-sertifikaty"}],"Tags":["oop","quality"]}
{"_id":{"$oid":"5e0a29d1264c0bcdadda50ee"},"Title":"О проблеме эстимейтов в разработке программных продуктов","Url":"o-probleme-estimejtov","Text":"<p>При разработке программного обеспечения постоянно возникает необходимость давать эстимейты или эстимации (estimates), то есть оценку времени работ. Оценку приблизительного времени работы выполняет непосредственно программист в простых человеко-часах или в относительных величинах Story Points. Полученные цифры используются, например, для планирования спринтов или подбора исполнителей на проект.</p>{ad}<p>Эстимейты в разработке ПО обладают одним недостатком: они редко когда бывают точными и могут в разы расходиться с фактическим временем выполненной работы. Даже существует утверждение, смысл которого в том, что точный эстимейт для некоторой задачи можно дать тогда и только тогда, когда работа над этой самой задачей уже завершена.</p><h3>Классификация работ</h3><img src='https://storage.googleapis.com/youit/images/laptop-hands.png' style='float:left' alt='Ноутбук, Графики' /><p>Для того чтобы глубже понять проблему эстимейтов, сначала необходимо классифицировать работу программистов. Каждый вид работ имеет свою сложность при проставлении эстимейтов.</p><p><b>Вид №1 - Разработка нового функционала</b></p><p>Разработка нового функционала (конечно же при условии полных и непротиворечивых требований заказчика) является наверное самым благоприятным случаем для более-менее точного эстимейта. И здесь обычно <a href='/post/junior-programmer-s-10-godami-opyta-raboty-bred'>чем опытнее программист</a>, тем более точным будет его эстимейт. Если же программист серьезно просчитывается, то это обычно говорит о его неопытности и чрезмерном оптимизме, чем о проблеме самих эстимейтов.</p><p><b>Вид №2 - Разработка нового функционала и его интеграция с существующей системой</b></p><p>Тут для предоставления точного эстимейта программисту вначале требуется достаточное количество времени на изучение интерфейса той системы, с которой ему необходимо интегрироваться. Если программисту такого времени не предоставляют или оно ограничено – эстимейт будет далеким от истины, так как он не будет учитывать особенностей внешней системы.</p><p><b>Вид №3 - Расширение существующего функционала</b></p><p>При расширении существующего функционала проблема эстимейтов аналогична предыдущему примеру, так как снова программисту необходимо достаточное количество времени на изучение того функционала, который он планирует расширять или модифицировать. Если время на его полное и тщательное изучение отсутствует – то реалистичного эстимейта не получится.</p><p><b>Вид №4 – Исправление дефектов в собственном функционале</b></p><p>Если опытному программисту приходится исправлять дефекты или багфиксить в собственном авторском функционале, то имеются все предпосылки для реалистичного эстимейта. Ведь если программист разрабатывал некоторый функционал, то он хорошо знаком со всеми деталями его реализации. Следовательно, программист имеет большие шансы быстро и без долгого анализа понять причину бага, чего обычно достаточно для реалистичного эстимейта.</p><p><b>Вид №5 - Исправление дефектов в унаследованном коде</b></p><p><a href='/post/prostymi-slovami-o-ponyatii-bag-v-programmirovanii'>Дефекты в унаследованном или просто чужом коде</a> не эстимируются вовсе до момента, пока не установлена их причина. Это как с поломкой машины. Если она заглохла, то пока вы как минимум не заглянете под капот, вы не скажете сколько вам потребуется времени на исправление поломки.</p><p class='cite'>Программист должен давать эстимейты своим менеджерам или заказчикам на дефект в унаследованном коде только после его предварительного анализа. В противном случае эстимейт будет не эстимейтом, а ничем не подкрепленным предположением.</p><p>Помните о том, что вы всегда должны заглянуть под капот.  Доносите это до всех тех людей, включая не техничных заказчиков и менеджеров, которые требуют от вас эстимейта здесь и сейчас. </p><p><i>P.S. Наверное, фундаментальна проблема эстимейтов заключается в самом названии. Если термин “эстимейт” (estimate - оценка) переименовать на более подходящий термин “прогноз” (forecast), то общее положение дел в разработке ПО возможно станет чуть лучше.</i></p>","Created":{"$date":{"$numberLong":"1577700000000"}},"Description":"При разработке программного обеспечения постоянно возникает необходимость давать эстимейты или эстимации (estimates), то есть оценку времени работ.","Type":{"$numberInt":"2"},"Views":{"$numberInt":"209"},"CommentsCount":{"$numberInt":"0"},"WhoDisliked":[],"WhoLiked":["5ddfa425048adc0001295115"],"Similar":[{"Title":"Как программисту писать качественный код, следуя лишь одному правилу","Url":"kak-programmistu-pisat-kachestvennyj-kod"},{"Title":"Как программисту правильно саморазвиваться?","Url":"kak-programmistu-pravilno-samorazvivatsya"}],"Tags":["estimate"]}
{"_id":{"$oid":"5e0f1443264c0bcdaddc355f"},"Title":"Плюсы и минусы работы программиста","Url":"plusy-i-minusy-raboty-programmista","Text":"<p>Выбор будущей профессии, которая будет приносить удовольствие – это дело непростое. Как правило, чтобы действительно понять подходит ли вам профессия или нет, необходимо поработать на ней хотя бы несколько месяцев. Но можно минимизировать риск неудачного выбора, если стараться заранее максимально изучить особенности своей будущей профессии, пусть и в теории.</p>{ad}<p>В данном посте мы с вами пройдемся по ключевым особенностям работы программиста, после чего вы сможете самостоятельно выбрать плюсы и минусы под себя.</p><p><b>Доходы</b> На сегодняшний день профессия программиста относится к ряду хорошо оплачиваемых и падение заработных плат для профессионалов в обозримом будущем не предвещается. Зарплаты стартуют в среднем от 300-400$ <a href='/post/kak-dolgo-nuzhno-uchitsya-s-nulya-do-dolzhnosti-trainee-software-engineer'>для молодых трейни специалистов</a> и достигают 5000$ для технических лидеров и архитекторов.</p><p><b>Необходимость регулярно учиться</b> Профессия требует регулярного совершенствования фундаментальных знаний, а также изучения новых фреймворков, инструментов, шаблонов, с целью поддерживать свою ценность как специалиста и оставаться конкурентоспособным на рынке. Причем обучаться нужно как начинающему программисту, так и тому у кого уже за спиной десять лет опыта по причине динамики развития инструментов и техник в разработке программного обеспечения.</p><p><img src='https://storage.googleapis.com/youit/images/freedom.png' style='float:left;' alt='Calm Head'/><b>Нет жесткой привязки к офису</b> Работа программистом не требует регулярного присутствия в офисе строго по 40 часов в неделю для выполнения своей работы. Главное требование для вас - это выполнять задачи в поставленный срок при допустимом качестве. И в каком именно месте, офисе или дома, вы с этим требованием будете справляться, часто не имеет значения.</p><p><b>Ненормированный рабочий график</b> Не редко задачи для программиста распределяются неравномерно в течение временного отрезка. Одна неделя может быть загружена работой в следствие приближающегося релиза или внезапно найденных <a href='/post/prichiny-poyavleniya-spagetti-koda'>серьезных критических дефектов</a>, другая неделя может быть практически без задач, например, из-за временного отсутствия у заказчика понимания куда двигаться дальше или из-за бизнес-аналитиков, которые не успевают сформировать требования к задачам.</p><p><b>Сидячая работа</b> Очевидно, что большую часть рабочего времени необходимо сидеть в кресле перед экраном монитора. Конечно можно периодически разминаться в спортзалах, которыми не редко оборудованы IT-компании или переоборудовать свое рабочее место на стоячее.</p><p><b>Необходимость владения английским</b> Программист должен владеть английским языком на уровне B1 по ряду причин: необходимость чтения документации, книг, общение с заказчиком. Также необходимость общения на английском языке может возникнуть даже со своими же коллегами по проекту, ведь на сегодняшний день формирование команды из представителей разных стран уже не редкость.</p> <img src='https://storage.googleapis.com/youit/images/calm-head.png' style='float:left;' alt='Calm Head'/><p><b>Необходимость в психологической выносливости</b> Программист может не редко сталкиваться со сложными и кажущимися на первый взгляд нерешаемыми задачами. Такие задачи требуют долгого и кропотливого анализа, настойчивости, выносливости и умении не впадать в отчаяние в трудных ситуациях еще и под возможным давлением руководства. </p><p><b>Изобилие карьерных путей</b> Несмотря на то, что большинство программистов проходит достаточно стандартный путь от должности Junior до Senior и останавливается на этом, существует еще <a href='/post/karernyj-put-programmista-ot-trejn-do-arkhitektora'>не мало путей развития</a>. Вы можете стать техническим лидером проекта, узким специалистом в определенной технологии, техническим консультантом, архитектором или радикально изменить направление, переквалифицировавшись в менеджера проектов.</p><p><b>Нельзя просто оставить работу в пределах офиса</b> Если вы получили задачу, над которой вы усиленно думали на работе несколько часов и не придумали решение, то вряд ли после выхода из офиса вы сможете переключить свою голову и забыть о задаче до следующего рабочего дня. Скорее всего ваш мозг даже против вашей воли будет искать решение задачи во время поездки в машине, вечернего ужина с семьей и даже сна. Не зря ведь программирование называют диагнозом, а не профессией.</p><p>Теперь зная ключевые особенности профессии вы сможете самостоятельно выбрать, что для вас из вышеперечисленного списка есть плюсом, а что минусом. Это позволит вам сделать уже более взвешенный выбор подходит ли работа программиста для вас или нет.</p>","Created":{"$date":{"$numberLong":"1578042000000"}},"Description":"В данном посте мы с вами пройдемся по ключевым особенностям работы программиста, после чего вы сможете самостоятельно выбрать для вас является плюсами, а что минусами.","Type":{"$numberInt":"1"},"Views":{"$numberInt":"252"},"CommentsCount":{"$numberInt":"0"},"WhoDisliked":[],"WhoLiked":["5ddfa425048adc0001295115"],"Similar":[{"Title":"Что такое Энтерпрайз разработка?","Url":"chto-takoe-enterprajz-razrabotka"},{"Title":"Как попасть в IT компанию НЕ программистом?","Url":"kak-popast-v-it-kompaniyu-ne-programmistom"}],"Tags":["rabotaprogrammista","carrier"]}
{"_id":{"$oid":"5e1486da264c0bcdadddc558"},"Title":"Введение в основы Информатики","Url":"vvedenie-v-osnovy-informatiki","Text":"<p><a href='https://codeburst.io/intro-to-computer-science-terminology-f9ae64e75d27?'>Автор оригинала: Robyn Silber</a></p><h3>Информатика</h3><p>Сложное определение: <b>Информатика</b> - это наука об информационных технологиях, процессах и их взаимодействии с внешним миром.</p><p>Простое определение: <b>Информатика</b> - это наука об использовании компьютеров для решения проблем человека.</p>{ad}<h3>Основы компьютера</h3><p><b>Компьютер</b> - это машина, которая выполняет вычисления на основе имеющихся инструкций.</p><p><b>Компьютер</b> состоит из двух компонентов:</p><ul><li>аппаратная часть (hardware)</li><li>программное обеспечение (software)</li></ul><p><b>Аппаратная часть</b> состоит из физических компонентов внутри вашего компьютера. По аппаратной части можно ударить, пнуть, выбросить в урну или взвесить на весах.</p><p><b>Программное обеспечение</b> уже не является физическим компонентом. Программное обеспечение состоит из набора инструкций для аппаратной части. Инструкции обычно хранятся на вашем компьютере в специальных файлах. Такие инструкции написаны не на русском или английском языках, а на специальном <i>языке программирования</i>.</p><p>Подытожим вышесказанное: аппаратная часть - это все к чему вы можете прикоснуться своими пальцами. Программное обеспечение - это набор инструкций для аппаратной части.</p><p><b>Программа (program) или приложение (application)</b> - это часть программного обеспечения. Программа представляет собой сохраненный на вашем компьютере файл, который содержит написанные на языке программирования инструкции. Когда вы запускаете программу, компьютер читает инструкции из файла одну за другой и выполняет их.</p><p><b>Код</b> - это синоним как для инструкций, так и для программного обеспечения. Код - это просто набор специальных слов (команд) и знаков пунктуации, которые вместе формируют язык программирования.</p><h3>Аппаратная часть компьютера</h3><p>Для изучения языка программирования, сначала необходимо изучить основы <b>аппаратной части компьютера</b>.</p><p>Различные компоненты аппаратной части предназначены для решения разных задач. Существуют 6 главных компонентов, которые формируют <b>аппаратную часть компьютера</b>:</p><ul><li> Центральное процессорное устройство (The Central Processing Unit, CPU)</li><li>  Основная или Оперативная память (Main Memory или RAM)</li><li> Вторичное хранилище (Secondary Storage)</li><li> Устройства Ввода/Вывода (Input/Output Devices, I/O Devices)</li><li> Сеть (Network)</li><li>Шина (Bus)</li></ul><img src='https://storage.googleapis.com/youit/images/hardware-components.png' class='image-in-post' alt='Computer Hardware Components'/><p><b>CPU</b> часто называют мозгом компьютера. CPU является ответственным за выполнение инструкций, таких как программный код.</p><p><b>Основная память</b> или <b>Оперативная память (&quot;Random Access Memory&quot;, RAM)</b> используется для хранения: 1) кода ваших программ и 2) используемых программой данных в процессе ее выполнения. Когда вы запускаете приложение на вашем компьютере (например, Microsoft Word), то код, предназначенный для запуска приложения, загружается в оперативную память вашего компьютера.</p><p><b>Вторичное хранилище</b> используется для хранения кода программ и данных пока они активно не используются компьютером.</p><p><b>Устройства ввода/вывода</b> позволяют людям взаимодействовать с компьютером. Устройства ввода/вывода позволяют вводить данные в компьютер (клавиатура, мышь, микрофон) или выводить данные пользователю (монитор, принтер, динамики).</p><p><b>Шина</b> - это набор проводов, которые соединяют между собой различные элементы аппаратной части, благодаря чему они могут обмениваться данными. Например, когда вы запускаете программу, то шина пересылает данные (вместе с программным кодом) из Вторичного хранилища в Оперативную память.</p><p><b>Сеть</b> позволяет соединять между собой компьютеры, которые расположены в разных уголках мира. Сеть позволяет вам отправлять и получать такие данные, как например электронные письма.</p><h3>Терминология программирования – Синонимы</h3><p>Термины в каждой из трех последующих групп можно воспринимать как синонимы, несмотря на существующие небольшие отличия между ними. Для начального уровня вдаваться в различия между каждым термином не имеет смысла.</p><p><i>1. код = инструкции = программное обеспечение = программа = приложение = аппликация</i></p><p><i>2. программирование = кодинг = разработка программного обеспечения</i></p><p><i>3. программист = кодер = разработчик программного обеспечения = веб-разработчик = инженер-программист</i></p><h3>Машинный язык vs Язык программирования</h3><p>Компьютеры и люди формулируют и понимают информацию по-разному.</p><p>Всякий раз когда вы на своем компьютере сохраняете данные (например, в Word файл), компьютер сохраняет введенный вами текст в специальном <b>двоичном</b> (бинарном) формате, который еще называют <b>машинным языком</b>.</p><p><b>Двоичный язык</b> состоит из комбинации нулей и единиц. Каждый символ вашей клавиатуры представлен уникальным двоичным кодом. Символом может быть буква, цифра, знак препинания, пробел, табуляция и так далее. Все символы и их целочисленные представления описаны в специальной ASCII таблице в десятичном формате. Например, символ &quot;A&quot; и &quot;a&quot; представлен числом 65, а символ &quot;a&quot; - числом 97. Однако, компьютер преобразует десятичный формат в двоичный, которым он непосредственно и оперирует.</p><p>В двоичном формате все значения представлены цифрами 0 и 1. Любое число может быть преобразовано вами в двоичный формат при помощи несложных вычислений с использованием математических формул. Программистам нет никакой необходимости заниматься этими преобразованиями. Однако, если вам хочется получить двоичное представление любого числа, то воспользуйтесь <a href='https://codebeautify.org/decimal-binary-converter' target='_blank'>этим калькулятором.</a></p><p>Когда вы сохраняете Word файл и закрываете приложение, ваш компьютер фактически сохраняет документ в виде последовательности нулей и единиц. Компьютеры были спроектированы для продуктивного использования людьми. По этой причине в открытом Word документе вы видите текст на человеческом языке, а не на двоичном.</p><p><b>Двоичный (машинный язык)</b> относится к низкоуровневому языку, так как его непосредственно понимают компьютеры. Человеку использовать такой язык для разработки программ практически невозможно.<p>Программисты пишут программы при помощи выбранного <b>языка программирования</b>. Современные языки программирования в свою очередь относятся к категории высокоуровневых языков программирования, так как программисты могут их читать и писать на них код.</p><p>Язык программирования, так же как например русский или английский, имеет собственный набор правил <b>(синтаксис)</b>. Язык программирования также имеет набор специальных ключевых слов, каждое их которых имеет определенный смысл и выполняет возложенную на него функцию.</p><h3>Парадигмы программирования</h3><p>Люди используют различные языки для общения друг с другом. Также люди используют различные языки программирования для написания программ.</p><p>Программист, владеющий несколькими языками программирования, выберет наиболее подходящий в зависимости от поставленной перед ним задачи. Например, одни языки программирования больше подходят для веб-разработки, в то время как другие языки лучше себя покажут при разработке мобильных приложений.</p><p>Языки программирования могут быть классифицированы по большому количеству признаков, одним из которых является <b>Парадигма программирования</b>.</p><p>Вот несколько определений понятия &quot;<a href='/post/sovremennye-paradigmy-programmirovaniya'>Парадигма</a>&quot;:</p><p><i>Парадигма - это способ или направление мышления человека.</i></p><p><i>Парадигма программирования - это способ классификации языков программирования на основе стиля или методологии программирования.</i></p><p>Вот несколько основных парадигм программирования:</p><ul><li><b>Функциональная</b> парадигма</li><li><b>Процедурная</b> парадигма</li><li><b>Императивная</b> парадигма</li><li><b>Объектно-ориентированная</b> парадигма</li></ul><p>Например, языки Java и C это языки программирования. Язык Java относится к группе объектно-ориентированных языков, в то время как язык С является представителем группы процедурных языков программирования.</p><p>На данном этапе вам нет необходимости знать значения понятий &quot;объектно-ориентированный&quot; или &quot;процедурный&quot;. Мы коснулись этих определений только для того, чтобы узнать о существовании одной из основополагающих классификаций существующих языков программирования и не более того.</p><h3>Написание и сохранения собственного кода</h3><p>Первым шагом в разработке программного обеспечения является написание кода. Программа или приложение выполняет определенные задачи для достижения некой цели. Вы как программист должны сначала понять, что конкретно должен делать ваш код, а потом написать код.</p><p>Когда вы хотите написать сочинение вы используете Word или любой другой текстовый редактор. Вы просто запускаете редактор, создаете файл, пишите какой-то текст и сохраняете документ в формате .docx или .pdf.</p><p>Процесс написания кода похож на процесс написания сочинения.</p><p>Вы можете писать свой код используя текстовый редактор или <b>Интегрированную среду разработки (Integrated Development Environment, IDE)</b>. IDE - это программа, которая содержит все необходимые программисту инструменты для разработки, как например текстовый редактор (text editor), компилятор (compiler), среду выполнения (runtime environment) и отладчик (debugger).</p><p><b>Отладчик (Debugger)</b> - это инструмент, который программисты используют для поиска ошибок в коде. Эти ошибки еще называют <b>багами (bugs)</b>. Баг может не позволить программе скомпилироваться, запуститься или может быть причиной некорректных результатов в работе программы. Например, если программа-калькулятор выдает ответ 5 на операцию 2 умножить на 2, то это и есть некорректное значение или баг.  Умение выполнять отладку кода позволит найти в каком именно месте код был написан неправильно. Отладка является важным навыком для каждого программиста.</p><p>После того как код программы написан, вы должны сохранить его в текстовом файле <b>(исходный файл)</b>. Исходный файл - это обычный файл, который содержит <b>исходный код</b> вашей программы. Для сохранения исходного файла необходимо указать его имя и расширение. Исходный файл имеет специальное расширение, в зависимости от выбранного языка программирования. Например, расширение <b>.java</b> используется для исходных файлов, код которых написан на языке Java. Расширение .с используется в языке С.</p><h3>Компиляция и запуск собственного кода</h3><p>Представим, что вы написали код своей программы на языке С и сохранили его в файле myfirstprogram.c. Очевидно, что теперь вам нужно запустить свой код на выполнение для проверки корректности работы программы.</p><p>Перед тем как ваша программа будет запущена, исходный код файла myfirstprogram.c должен быть преобразован с <b>высокоуровневого языка</b> С к <b>низкоуровневому двоичному языку</b>. Полученные команды двоичного языка помещаются в <b>исполняемый файл</b> с расширением <b>.exe</b>. <p>Процесс преобразования высокоуровневого кода к низкоуровневому, а также последующая его упаковка в исполняемый файл называется <b>компиляцией</b>.</p><p><b>Компилятор</b> - это компьютерная программа, которая выполняет компиляцию вашего кода. Большинство современных IDE снабжены компиляторами. IDE могут компилировать код автоматически, когда вы запускаете программу на выполнение. Если вы не используете IDE, вам необходимо запустить компилятор самостоятельно и указать путь к исходному файлу, который вы хотите скомпилировать.</p><p>Если ваш исходный код не имеет багов, то процесс компиляции завершится успешно и вы получите исполняемый файл. Однако, если ваш исходный код имеет хотя бы один баг, то компилятор выдаст ошибку и исполняемый файл создан не будет. Пока ошибка не будет исправлена, запускать компилятор повторно не имеет смысла.</p><p>Как только ваша программа скомпилировалась успешно, вы можете запустить ее на выполнение, открыв исполняемый файл. При запуске исполняемого файла, ваш компьютер выполнит полученные машинные инструкции, отобразит вам окно программы и будет ожидать от вас дальнейших действий.</p>","Created":{"$date":{"$numberLong":"1578402000000"}},"Description":"Разбираем основные понятия информатики, такие как программное обеспечение, код, аппаратная часть, программирование, машинный язык и другие.","Type":{"$numberInt":"2"},"Views":{"$numberInt":"227"},"CommentsCount":{"$numberInt":"0"},"WhoDisliked":[],"WhoLiked":["5ddfe9e6048adc000129511e"],"Similar":[{"Url":"sovremennye-paradigmy-programmirovaniya","Title":"Современные парадигмы программирования"},{"Url":"ne-dayetsya-obucheniye-programmirovaniyu","Title":"Не дается обучение программированию?"}],"Tags":["informatics"]}
{"_id":{"$oid":"5e1829c9264c0bcdaddef68e"},"Title":"Как стать более ценным программистом","Url":"kak-stat-bolee-cennym-programmistom","Text":"<p>Наверное, мало кого интересует ответ на вопрос <i>с какой целью необходимо повышать свою ценность как программиста для компании</i>, в которой вы работаете. Ведь ответ достаточно очевиден: повышение своей ценности ведет к хорошему материальному вознаграждению, признанию коллег, удовлетворению собственных амбиций, а также к целому ряду других приятных косвенных преимуществ.</p> {ad} <p>Одни программисты совершенствуются ради достижения четко поставленных целей, другие двигаются по привычке, а кто-то третий совершенствуется под давлением своего окружения. Какой бы ни была причина стремления вперед, повышение своей ценности как специалиста в сегодняшних реалиях требует более комплексного подхода, чем просто изучение новых инструментов. Что именно включает в себя комплексный подход? Разбираемся.</p> <h3>Изучение предметной области текущего проекта</h3> <img src='https://storage.googleapis.com/youit/images/book-read-min.png' style='float:left;' alt='Чтение книги' /> <p>Посвящайте время изучению <b>предметной области проекта</b>, на котором вы в данный момент работаете. Приведу простой пример: если вы работаете над веб-приложением для авиа-компании, то вам нужно знать по каким законам формируются цены на авиа-перелеты, какие существуют виды скидок для клиентов, в каких случаях происходит возврат денег за купленный билет и так далее. Или вот другой пример: если вы занимаетесь разработкой программного обеспечения для банка, вам было бы хорошо ориентироваться в различных банковских процессах и таких понятиях как кредит, дебит, девальвация, грэйс период и прочие.</p> <p>Конечно вы не должны быть экспертом в бизнесе вашего заказчика (для этого существуют <b>бизнес-аналитики</b>), но вы должны иметь общее понимание бизнеса и ориентироваться в его основных аспектах. Имея хорошее понимание предметной области, вы сможете выполнять свои задачи быстрее. В некоторых случаях вы сможете даже предлагать своему клиенту способы усовершенствовать его бизнес-процессы. Такой подход особенно имеет смысл когда вам нравится предметная область вашего проекта и вы планируете задержаться на нем надолго. Совершенствуя свои <b>знания в предметной области</b> вы можете стать незаменимым сотрудником на проекте и ускорить свой рост по карьерной лестнице в направлении технического лидера проекта или архитектора.</p> <p>Существует такая тема как <a href='/map/dotnetweb#ddd'>Предметно-ориентированное проектирование (Domain-driven Design, DDD)</a>. Изучая ее, можно уяснить важность понимания предметной-области своего проекта, способы моделирования бизнеса заказчика в своем коде и ряд прочих интересных концепций.</p> <h3>Совершенствование английского языка</h3> <img src='https://storage.googleapis.com/youit/images/ABC-english-min.png' style='float:left;' alt='Английский алфавит ABC' /> <p>В сегодняшнем мире знания английского могут потребоваться как представителям диаметрально противоположных профессий для эффективной работы, так и туристам для более удобного отдыха за границей.</p> <p>Программист должен знать английский как минимум на уровне B1 или Intermediate по нескольким причинам:</p> <ul> <li>Программисту часто необходимо общаться напрямую с заказчиком, чтобы информировать его о проделанной работе и регулярно задавать возникающие рабочие вопросы.</li> <li>В англоязычном сегменте интернета существует больше качественных книг, статей и видео-уроков, чем в русскоязычном. Если не верите, то попробуйте найти достойные русскоязычные аналоги платформ <a href='https://linuxacademy.com/'>linuxacademy</a> или хотя бы <a href='https://www.pluralsight.com/'>pluralsight</a>.</li> <li>Большие компании могут состоять из офисов, расположенных в разных странах. Следовательно, команды под некоторый проект могут быть сформированы из представителей разных стран, у которых родные языки не совпадают.</li> </ul> <h3>Совершенствование личностных качеств / Soft Skills</h3> <p>Личностные качества или <b>Soft Skills</b> характеризуют вас не как профессионала, а в первую очередь как человека. Современные программные системы не разрабатываются самостоятельно и только лишь для себя любимого. Работа в основном происходит <b>в команде</b> и на заказчиков, что требует умения взаимодействия как с членами по команде, так и соответственно с заказчиком.</p> <p>Вот список наиболее важных в работе с людьми личностных качеств:</p> <ul> <li><b>Умение быстро обучаться.</b> Безусловно у каждого из нас имеется своя собственная скорость восприятия информации. Однако, если вам говорят, что вы недостаточно быстро обучаетесь, то задайте себе два простых вопроса: <i>1) Посвятил ли я изучению темы достаточное количество времени? Может я вчера мог поучить дома то, чего от меня хочет мой техлид, вместо просмотра сериала? 2) А достаточно ли у меня базовых / фундаментальных знаний в данной области?</i> </li> <li><b>Умение признавать свою ошибку.</b> Ошибки совершают все, поэтому не бойтесь признавать их. Признание собственной ошибки покажет вас как адекватного, здравомыслящего человека. Но не злоупотребляйте. Не забывайте из каждой ошибки делать выводы и не допускать их повторно. Ведь одно дело признаться в десяти разных ошибках, а совсем другое - признаться десять раз в одной и той же. </li> <li><b>Умение четко формулировать свои мысли.</b> Необходимо уметь доносить свои мысли, например, в попытках обосновать свое техническое решение. Если у вас не получается и вас не воспринимают всерьез, задайте себе два простых вопроса: <i>1) Достаточное ли количество времени я потратил на подготовку своих аргументов или я поспешил вступать в дискуссию? 2) Достаточно ли у меня знаний в данном вопросе или мое предложение не восприняли, потому что мой оппонент элементарно более подкован в данном вопросе?</i></li> </ul> <p>Просмотрите внимательно список пункт за пунктом несколько раз. Попробуйте вспомнить были ли у вас проблемы в работе по причине одного или нескольких пунктов. Что можно сделать, чтобы исправить ситуацию в лучшую сторону?</p> <p>Если у программиста плохо развиты вышеперечисленные качества, то стоит заняться работой над ними как минимум в равной степени с развитием вашего английского и техническими знаниями, если не в большей. В большинстве случаев работодатель отдаст предпочтение человеку с хорошими Soft Skills и не на 100% подходящими техническими знаниями, чем идеального технаря, который не умеет слушать, доносить мысли другим и не желает учиться.</p> <h3>Совершенствование технических знаний и навыков</h3> <p>Пункт про совершенствование технических навыков находится на последних местах в нашем рейтинге не по причине того, что является для программиста низкоприоритетным. Наоборот, без хороших технических навыков ценным специалистом быть невозможно. Просто технические навыки - это само собой разумеющейся пункт, который приходит программисту на ум в первую очередь, когда заходит речь о повышении своей ценности.</p> <p>Изучайте вглубь языки программирования, технологии и инструменты, которые применяются на вашем проекте. Только помните о том, что даже отдельно взятая технология может быть достаточно разносторонней.  Изучать все подряд от корки до корки не будет эффективным занятием. Например, на вашем проекте используется база данных MongoDB. Попробуйте оценить самостоятельно или с помощью коллег, какие конкретно элементы MongoDB часто используются и займитесь изучением конкретно их. Если такой элемент в MongoDB как Репликация не используется на текущем проекте вовсе, то вашей первоочередной задачей должно быть изучение чего-то более ценного для проекта в данный момент, например, написание эффективных запросов выборки данных.</p> <p>Регулярное изучение и оттачивание мастерства в технологическом стеке вашего проекта позволит вам решать задачи быстрее, предлагать решения своим коллегам, проводить качественные код-ревью и делиться знаниями со всей своей командой.</p> <h3>Совершенствование фундаментальных знаний</h3> <img src='https://storage.googleapis.com/youit/images/plant-min.png' style='float:left;' alt='Росток' /> <p>О важности фундаментальных знаний уже <a href=' /post/chto-dolzhen-minimalno-znat-kazhdyj-khoroshij-programmist'>не раз упоминалось на YouIT</a>. Для фундаментальных знания нет границ в виде многочисленных технологий и фреймворков. Например, реализацию хеш-таблицы можно встретить в любом современном языке программирования, как например <i>JavaScript, Java, C#, Python, Ruby</i> и прочих. А идею шаблона MVC реализуют многочисленные веб-фреймворки, такие как <i>Ruby on Rails, ASP.NET MVC, Spring MVC, Zend Framework</i> и другие.</p> <p>К фундаментальным знаниям относятся такие темы как шаблоны и принципы проектирования, архитектурные шаблоны, структуры данных и алгоритмы, принципы реляционных баз данных, техники рефакторинга и другие.</p> <p>Освоение фундаментальных знаний может помочь вам в краткосрочной перспективе решить здесь и сейчас некоторую задачу, которая раньше была чрезвычайно сложной и беспросветной. Также фундаментальные знания помогут вам в долгосрочной перспективе намного быстрее и осмысленнее изучать очередной язык программирования или фреймворк, так как везде заложены одинаковые либо схожие концепции.</p> <p>Еще одно неоспоримое преимущество фундаментальных знаний над не фундаментальными (технологии, фреймворки, инструменты) в том, что набор фундаментальных знаний фиксирован и можно сказать стоит на месте, по сравнению с не фундаментальными. Такое положение дел позволяет практически один раз выучить материал и быть уверенным в том, что через год не нужно будет опять переучиваться, как например в случае с JavaScript фреймворками.</p>","Created":{"$date":{"$numberLong":"1578643200000"}},"Description":"Поговорим о наборе средств, которые помогут Вам стать более ценным программистом для своего работодателя.","Type":{"$numberInt":"1"},"Views":{"$numberInt":"409"},"CommentsCount":{"$numberInt":"0"},"WhoDisliked":[],"WhoLiked":["5ddfe9e6048adc000129511e","5de3a5147dd2f600019789ba"],"Similar":[{"Url":"plusy-i-minusy-raboty-programmista","Title":"Плюсы и минусы работы программиста"},{"Url":"kak-programmistu-pisat-kachestvennyj-kod","Title":"Как программисту писать качественный код, следуя лишь одному правилу"},{"Url":"kak-programmistu-pravilno-samorazvivatsya","Title":"Как программисту правильно саморазвиваться?"}],"Tags":["rabotaprogrammista","learning","carrier"]}
{"_id":{"$oid":"5e1d711d264c0bcdade0b7de"},"Title":"ТОП-7 обучающих онлайн платформ с видео-курсами для программистов","Url":"top-7-platform-s-video-kursami","Text":"<p>На сегодняшний день спрос на онлайн-обучение удовлетворен достаточно хорошо большим количеством видео-курсов для программистов любых уровней и специализаций. Мы составили для вас список из семи распространенных онлайн платформ, на которых обучаются большинство программистов.</p><h3>LinuxAcademy</h3> <p><a href='https://linuxacademy.com/'>LinuxAcademy</a> содержит полноценные и углубленные обучающие курсы по таким облачным провайдерам как <b>Microsoft Azure, AWS, Google Cloud Platform</b>, а также ряду других популярных технологий, среди которых <b>Big Data, Docker, Kubernetes</b>. В большинство курсов вплетены практические лабораторные работы вместе с контрольными тестами для закрепления пройденного материала.</p> <p>LinuxAcademy предлагает бесплатную версию с ограниченным доступом к контенту и платную за 49$ в месяц или 449$ в год.</p> <p>Некоторые хорошие курсы:</p> <ul> <li><a href='https://linuxacademy.com/course/docker-deep-dive-part-1/' target='_blank'>Docker – Deep Dive</a></li> <li><a href='https://linuxacademy.com/course/serverless-application-on-aws/' target='_blank'>Building a Full-Stack Serverless Application on AWS</a></li> <li><a href='https://linuxacademy.com/course/big-data-fundementals/' target='_blank'>Big Data Fundamentals</a></li> </ul> {ad} <h3>Udemy</h3> <p><a href='https://www.udemy.com/'>Udemy</a> содержит бесчисленное множество курсов для программистов на самые разные тематики. Имеются курсы на русском языке. Как начинающий так и матерый программист может найти на Udemy материал практически на любую интересующую его тему. Цена курса колеблется в среднем от 10 до 20 долларов за штуку. Платформа предусматривает обратную связь с автором курса. К единожды купленному вами курсу сохраняется пожизненный доступ.</p> <p>Некоторые хорошие курсы:</p> <ul> <li><a href='https://www.udemy.com/course/learn-data-structure-algorithms-with-java-interview/' target='_blank'>Learn Data Structure & Algorithm from scratch</a></li> <li><a href='https://www.udemy.com/course/design-patterns-csharp-dotnet/' target='_blank'>Design Patterns in C# and .NET</a></li> <li><a href='https://www.udemy.com/course/70532-azure/' target='_blank'>AZ-203 Developing Solutions for Microsoft Azure Exam Prep</a></li> </ul> <h3>Coursera</h3> <p><a href='https://www.coursera.org/'>Coursera</a> предлагает пользователям полноценные обучающие курсы по различным дисциплинам разработки программного обеспечения. Студенту предоставляются домашние задания, промежуточные тесты и итоговые экзамены. Часто при просмотре видео доступны субтитры на русском языке. Coursera дает возможность учиться бесплатно в течение 7 дней, после чего нужно отдавать порядка 50$ в месяц.</p> <p>Некоторые хорошие курсы:</p> <ul> <li><a href='https://www.coursera.org/specializations/python' target='_blank'>Python for Everybody Specialization</a></li> <li><a href='https://www.coursera.org/specializations/introduction-computer-science-programming' target='_blank'>Introduction to Computer Science and Programming Specialization</a></li> <li><a href='https://www.coursera.org/learn/version-control-with-git' target='_blank'>Version Control with Git</a></li> </ul> <h3>Pluralsight</h3> <p><a href='https://www.pluralsight.com/'>Pluralsight</a> предлагает хорошие по различным направлениям разработки программного обеспечения, начиная с языков программирования и заканчивая архитектурными вопросами. Среды авторов контента Pluralsight такие знаменитости как Джон Скит, Марк Симан, Дино Еспосито, Скотт Хансельман и другие.</p> <p>Pluralsight стоит 29$ в месяц или 299$ в год, которые нужно будет отдавать по истечении бесплатной версии в 200 минут просмотра видео-контента.</p> <p>Некоторые хорошие курсы:</p> <ul> <li><a href='https://www.pluralsight.com/courses/csharp-applying-functional-principles' target='_blank'>Applying Functional Principles in C#</a></li> <li><a href='https://www.pluralsight.com/courses/database-delivery-best-practices' target='_blank'>Database Delivery Best Practices</a></li> <li><a href='https://www.pluralsight.com/courses/clean-architecture-patterns-practices-principles' target='_blank'>Clean Architecture: Patterns, Practices, and Principles</a></li> </ul> <h3>LinkedIn</h3> <p><a href='https://www.linkedin.com/learning/'>LinkedIn</a> уже является не только социальной сетью, а и обучающей платформой с хорошими видео-курсами для программистов любой специализации. Первый месяц пользования является бесплатным и без ограничений, но последующие месяцы пользования обойдутся в 29$ при ежемесячной оплате или 299$ при оплате за один год.</p> <p>Некоторые хорошие курсы:</p> <ul><li><a href='https://www.linkedin.com/learning/microservices-foundations?autoplay=true' target='_blank'>Microservices Foundations</a></li> <li><a href='https://www.linkedin.com/learning/serverless-architecture?autoplay=true' target='_blank'>Serverless Architecture</a></li> <li><a href='https://www.linkedin.com/learning/python-advanced-design-patterns/welcome' target='_blank'>Python: Advanced Design Patterns</a></li> </ul> <h3>YouTube</h3> <p>Всем известный <a href='https://youtube.com/'>YouTube</a> содержит множество разнообразных учебных видео-уроков для программистов. По сравнению с платными специализированными платформами, на YouTube студент не найдет расширенных фильтров поиска. Далеко не все уроки создаются профессионалами, поэтому нужно уделять особое внимание рейтингу видео и комментариям под ним. Однако неоспоримым преимуществом YouTube по сравнению со всеми вышеперечисленными платформами является то, что YouTube бесплатный. Поэтому перед покупкой абонементов на LinuxAcademy или Pluralsight поищите уроки на YouTube, возможно вам будет вполне достаточно.</p> <p>Некоторые хорошие каналы:</p> <ul> <li><a href='https://www.youtube.com/channel/UCkw4JCwteGrDHIsyIIKo4tQ' target='_blank'>edureka!</a></li> <li><a href='https://www.youtube.com/user/iliakan/featured' target='_blank'>JavaScript.ru</a></li> <li><a href='https://www.youtube.com/channel/UCNPwMPudMEw-gnAT4zh_UZg' target='_blank'>DotNext</a></li> </ul> <h3>FreeVideoLectures</h3><p>С ресурсом <a href='https://freevideolectures.com/'>freevideolectures.com</a> мы еще не успели познакомиться вплотную, однако его беглый обзор, прочтение отзывов и само название сайта сформировало достаточно приятное впечатление.</p>","Created":{"$date":{"$numberLong":"1578988800000"}},"Description":"Список из семи распространенных обучающих онлайн платформ с видео-курсами, на которых обучаются большинство программистов любых уровней и специализаций.","Type":{"$numberInt":"2"},"Views":{"$numberInt":"284"},"CommentsCount":{"$numberInt":"0"},"WhoDisliked":[],"WhoLiked":["5ddfe9e6048adc000129511e","5e272688c6808700013fc4f2"],"Similar":[{"Url":"/post/dotnetweb","Title":"Карта знаний .NET Web программиста"},{"Url":"/post/chto-dolzhen-minimalno-znat-kazhdyj-khoroshij-programmist","Title":"Что необходимо минимально знать каждому хорошему программисту?"}],"Tags":["learning"]}
{"_id":{"$oid":"5e25fbb9264c0bcdade3c2d5"},"Title":"Карта знаний JS-Frontend программиста","Url":"js","Text":"<p><a href='/map/js' title='Карта знаний JS-Frontend программиста'>Карта знаний JS-Frontend программиста</a> охватывает тот набор знаний, который может потребоваться современному фронтенд программисту во время его работы. Карта включает в себя 13 тем, которые в скором времени будут дополнены еще несколькими не ключевыми темами.</p> <ul> <li>Язык разметки HTML & HTML5</li> <li>Таблицы стилей CSS & CSS3</li> <li>Язык программирования JavaScript</li> <li>JavaScript и Браузеры</li> <li>SPA-фреймворки React.js, Angular.js, Vue.js и JS-библиотеки</li> <li>Рефакторинг и Контроль качества кода</li> <li>Алгоритмы и Структуры Данных</li> <li>Парадигмы программирования и Объектно-ориентированное программирование</li> <li>Принципы SOLID и Шаблоны проектирования GoF</li> <li>Архитектурные шаблоны и Атрибуты качества (Quality Attributes)</li> <li>Веб-безопасность и OWASP</li> <li>Системы контроля версий: Git, Mercurial</li> <li>Гибкие методологии разработки: Scrum, Kanban и Scrumban</li> </ul>  <p>Не забывайте делиться с нами своими впечатлениями, пожеланиями или рекомендациями по улучшению в комментариях или на электронный адрес <a href='mailto:admin@youit.pro'>admin@youit.pro</a>.</p> <p>Счастливого обучения!</p>","Created":{"$date":{"$numberLong":"1579550400000"}},"Description":"Детализированная карта знаний для JS-Frontend программистов от Trainee до Senior. Используйте для самообучения, поиска пробелов в знаниях, создания программ обучения, подготовки к собеседованиям и продвижениям по карьерной лестнице.","Type":{"$numberInt":"1"},"Views":{"$numberInt":"297"},"CommentsCount":{"$numberInt":"5"},"WhoDisliked":[],"WhoLiked":["5ddfe9e6048adc000129511e"],"Tags":["roadmaps","oop","quality","testing","algorithms","js"],"Similar":[{"Title":"Карта знаний .NET Web программиста","Url":"dotnetweb"}]}
{"_id":{"$oid":"5e28786c264c0bcdade4ee74"},"Title":"Профессиональные привычки программистов в повседневной жизни","Url":"prof-privychki-programmistov","Text":"<p>Каждый профессионал своего дела в ходе многолетней повседневной работы обзаводится целым списком профессиональных привычек, которые он часто неосознанно привносит в свою повседневную нерабочую жизнь. Какие привычки встречаются у программистов? По каким конкретно привычкам можно легко поставить диагноз “программист”? Давайте разбираться.</p> <h3>Нумерация с нуля</h3> <p>Взгляните на такой список продуктов, написанный программистом. Ничего странного не замечаете?</p> <p><i> 0. Молоко<br/> 1. Рыба<br/> 2. Творог<br/> 3. Хлеб<br/> </i></p> <p>Как вы могли заметить, нумерация продуктов начинается с нуля, вместо привычной цифры 1. Дело в том, что в программировании в целях оптимизации используемых ресурсов отсчет всегда начинается с нуля. Например, первый элемент массива хранится под индексом ноль или значением по умолчанию для числовых типов данных также является ноль.</p> <p>В начале обучения программирования такой аспект выглядит достаточно  непривычно. Начинающие программисты часто допускают ошибки, забывая про нумерацию с нуля. Однако постепенно происходит привыкание и со временем отсчет с единицы даже в обычной жизни выглядит неэффективным использованием имеющихся в наличии цифр.</p> <h3>Профессиональный жаргон в повседневной речи</h3> <p>Ранее мы с вами обсуждали <a href='/post/sleng-programmistov-v-it'>почему программисты разговаривают на русско-английском суржике</a>. В работе от программиста часто можно услышать такие слова как <i>рикваирменты, багфикс, фича, енв</i> и другие. Разумеется, что подобные слова не остаются в пределах офиса, а неосознанно или осознанно переходят в повседневную жизнь. Помехи телевизора при просмотре телепередачи с семьей программист может назвать <i>“багом, который нужно фиксить”</i>, а отсутствие звукового сигнала в микроволновке относится к <i>“несовершенным рикваирментам”</i>.</p> <h3>Размытые оценки времени</h3> <p>Опытный программист далеко не часто согласится произнести вслух точное время выполнения работы, которую его просят сделать.  Настоящий программист назовет вам как минимум три цифры: оптимистичное, пессимистичное и наиболее вероятное время выполнения работы. А в некоторых отдельных случаях он вообще откажется давать какие-либо оценки, сославшись на отсутствие опыта в данном вопросе и не изученность проблемы. Дело в том, что <a href='/post/o-probleme-estimejtov'>оценка времени работ в программировании</a> является одной из самых проблемных тем в работе для многих программистов. Потому горький опыт не позволит им разбрасываться словами и ничем не подкрепленными оценками времени выполнения направо и налево.</p>","Created":{"$date":{"$numberLong":"1579710600000"}},"Description":"Каждый программист в ходе многолетней повседневной работы обзаводится рядом профессиональных привычек, которые он часто неосознанно привносит в свою повседневную нерабочую жизнь.","Type":{"$numberInt":"2"},"Views":{"$numberInt":"128"},"CommentsCount":{"$numberInt":"0"},"WhoDisliked":[],"WhoLiked":[],"Tags":["fun"]}
{"_id":{"$oid":"5e2ab620264c0bcdade5bb12"},"Title":"Как программисту быстрее писать код: 3 простых совета","Url":"3-soveta-kak-programirovat-bystree","Text":"<p>Скорость написания кода программистом является одним из важнейших показателей его продуктивности на работе. Ведь чем быстрее программист пишет код, тем быстрее он воплощает требования своего заказчика в жизнь, что позитивно отражается на всех участниках процесса разработки программного обеспечения.</p> <p>В независимости от того разрабатывает ли программист новый проект с нуля, исправляет дефект или дополняет существующую систему новой функциональностью, высокая скорость написания кода при удовлетворительном качестве имеет важность везде.</p> <p>Безусловно на скорость написания кода влияет такой фактор как опыт программиста. Связь здесь прямо пропорциональная: <i>чем больше опыта, тем быстрее и качественнее пишется код</i>. Большой опыт - это то к чему придет абсолютно каждый старающийся изо дня в день программист. Но набор солидного опыта - процесс долгий. Поэтому далее в данной статье мы разберем такие способы увеличения скорости написания кода, которые можно начать применять практически немедленно.</p>{ad}<br/><h3>Продумывайте решение заранее</h3> <p>Никогда не забывайте о <a href='https://www.edsd.ru/ru/princypy/cikl_razrabotki_po' target='_blank'>стадиях разработки программного обеспечения</a>, которые показывают, что написание кода идет только на третьем месте после сбора предъявляемых к задаче требований и ее последующего проектирования. Чем больше времени было посвящено сбору требований и проектированию, тем быстрее пойдет процесс написания кода.</p> <p>Помните, что изменения в одной стадии обязательно ведут к дополнительной работе или переработке последующих. Например, если вы посвятили стадии проектирования минимум времени, не учли важных деталей и начали писать код, то рано или поздно недостатки проектирования всплывут на поверхность. Вы будете вынуждены перепроектировать свое решение, что обязательно приведет к переписыванию вашего кода частично либо целиком.</p> <p>С другой стороны помните о том, что учесть абсолютно все на этапе проектирования невозможно, если конечно речь не идет о простых задачах.  Поэтому в вопросах проектирования кода необходимо искать золотую середину. Чтобы с ее поисками вам было проще, придерживайтесь нескольких правил: <ul><li>Проектируйте рабочее решение. Не приступайте к написанию кода, если по завершении стадии проектирования вы до конца не уверены как именно ваш код будет запускаться, откуда он будет брать данные, и как вообще он будет делать свою задачу.</li><li>Проектируйте основные сценарии использования вашего функционала. Начинать писать код можно после того, как в стадии проектирования учтены основные сценарии использования вашей задачи. Например, если вы пишите логику генерирования отсчетов, то вы должны понимать откуда будут браться входные данные, в каком виде они будут сохраняться, какие виды преобразования данных ваш код будет выполнять. А разного рода мелочи (например, отображаемый формат даты и времени) могут быть доработаны уже после реализации основного функционала.</li> <li>Пишите код, придерживаясь <a href='/post/kak-programmistu-pisat-kachestvennyj-kod'>принципов единой ответственности (Single Responsibility Principle)</a> и слабой связанности (Low Coupling). Такой код будет легко изменять и расширять в случае изменения требований клиента.</li></ul>  <h3>Используйте сниппеты в IDE</h3> <p>Программист пишет код в таком инструменте как Интегрированная Среда Разработки (Integrated Development Environment, IDE). Одной из многочисленных возможностей практически любой IDE является поддержка так называемых сниппетов (Snippet). Сниппетами являются наиболее часто применяемые фрагменты программного кода, которые обычно могут быть созданы одним-двумя кликами.</p> <p>Вот несколько примеров таких программных конструкций-сниппетов:</p> <p style='font-family:Consolas;font-size:13px;color:black;background:white; '><span style='color:#8f08c4;'>for</span>&nbsp;(<span style='color:blue;'>int</span>&nbsp;<span style='color:#1f377f;'>i</span>&nbsp;=&nbsp;0;&nbsp;<span style='color:#1f377f;'>i</span>&nbsp;&lt;&nbsp;length;&nbsp;<span style='color:#1f377f;'>i</span>++)<br/> {<br/> }<br/> </p> <p>или</p> <span style='font-family:Consolas;font-size:13px;color:black;background:white;'><span style='color:blue;'>class</span>&nbsp;<span style='color:#2b91af;'>MyClass</span><br/> {<br/> &nbsp;&nbsp;&nbsp;&nbsp;<span style='color:blue;'>public</span>&nbsp;<span style='color:#2b91af;'>MyClass</span>()<br/> &nbsp;&nbsp;&nbsp;&nbsp;{ <br/> &nbsp;&nbsp;&nbsp;&nbsp;} <br/> } </span> <p>или свой собственный спиппет (которые можно легко можно создать в любой IDE 'под себя'):</p> <span style='font-family:Consolas;font-size:13px;color:black;background:white;'><span style='color:green;'>/*мой&nbsp;пользовательский&nbsp;сниппет*/</span><br/> <span style='color:#8f08c4;'>for</span>&nbsp;(<span style='color:blue;'>int</span>&nbsp;<span style='color:#1f377f;'>i</span>&nbsp;=&nbsp;0;&nbsp;<span style='color:#1f377f;'>i</span>&nbsp;&lt;&nbsp;length;&nbsp;<span style='color:#1f377f;'>i</span>++) {<br/> &nbsp;&nbsp;&nbsp;&nbsp;<span style='color:#8f08c4;'>if</span>&nbsp;(<span style='color:blue;'>true</span>)<br/> &nbsp;&nbsp;&nbsp;&nbsp;{ <br/> &nbsp;&nbsp;&nbsp;&nbsp;} <br/> &nbsp;&nbsp;&nbsp;&nbsp;<span style='color:#8f08c4;'>else</span><br/> &nbsp;&nbsp;&nbsp;&nbsp;{ <br/> &nbsp;&nbsp;&nbsp;&nbsp;} <br/> } </span> <p>Подобные примитивные программные конструкции используются на каждом шагу, поэтому владение сниппетами сократит вам время написания кода и освободит ваши руки и голову от регулярного выполнения такой рутинной работы. Используйте существующие сниппеты. Создавайте собственные сниппеты. Оптимизируйте свое драгоценное время. Посвящайте максимум времени продумыванию задачи, а не рутинному набиранию на клавиатуре одних и тех же программных конструкций. </p> <h3>Используйте код повторно</h3> <p>Понятие “Повторное использование кода” говорит само за себя - вместо написания некоторого фрагмента кода с нуля мы просто берем и используем уже существующий код. В результате сокращается время написания кода, и уменьшается риск наделать ошибок, имплементируя функциональность самостоятельно.</p> <p>Повторное использование кода можно разделить на две группы по признаку <i>“откуда именно берется код для повторного использования”</i>. К первой группе относятся <b>сторонние библиотеки</b>, которые являются классическим примером повторного использования кода. Перед тем как приступать к реализации некоторого функционала, проведите небольшое исследование и убедитесь в том, что он уже не реализован за вас кем-то ранее. Например, вместо написания собственной функции вычисления квадратного корня, воспользуйтесь библиотекой Math, которая существует в различных языках программирования.</p> <p>Ко второй группе относится <b>ваш собственный код</b>. Когда вы пишите код, а именно реализуете методы, классы или целые сборки, то задумывайтесь о том, возможно ли будет повторное использование вашего кода в будущем. Для написания повторного используемого кода необходимо придерживаться одного простого, но очень важного принципа объектно-ориентированного проектирования, а именно <i>Принципа Единой Ответственности</i>. Например, следующий фрагмент кода нарушает принцип единой ответственности, выполняя валидацию данных и их сохранение в файл в одном методе: <p><span style='font-family:Consolas;font-size:13px;color:black;background:white;'><span style='color:blue;'>public</span>&nbsp;<span style='color:blue;'>bool</span>&nbsp;<span style='color:#74531f;'>SaveFile</span>(<span style='color:#2b91af;'>File</span>&nbsp;<span style='color:#1f377f;'>file</span>)<br/> {<br/> &nbsp;&nbsp;&nbsp;&nbsp;<span style='color:#8f08c4;'>if</span>&nbsp;(<span style='color:#1f377f;'>file</span>.Extension&nbsp;!=&nbsp;<span style='color:#a31515;'>&quot;pdf&quot;</span>)<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style='color:#8f08c4;'>return</span>&nbsp;<span style='color:blue;'>false</span>; <br/><br/> &nbsp;&nbsp;&nbsp;&nbsp;SaveFileToDisk(<span style='color:#1f377f;'>file</span>);<br/> &nbsp;&nbsp;&nbsp;&nbsp;<span style='color:#8f08c4;’>return</span>&nbsp;<span style='color:blue;'>return true</span>;<br/> } </span></p> <p>Если вы написали такой код для одного места программы, а потом вам потребовалась та же самая валидация в других местах, то вы должны будете выполнить рефакторинг данного метода во избежание копипасты. Рефакторинг отнимет у вас время и появится риск поломать уже работающую часть системы. Если бы автор данного кода изначально думал <i>о соблюдении принципа единой ответственности</i>, то он бы сразу выделил логику валидации файла в отдельный метод: <p><span style='font-family:Consolas;font-size:13px;color:black;background:white;'><span style='color:blue;'>public</span>&nbsp;<span style='color:blue;'>bool</span>&nbsp;<span style='color:#74531f;'>Save</span>(<span style='color:#2b91af;'>File</span>&nbsp;<span style='color:#1f377f;'>file</span>)<br/> {<br/> &nbsp;&nbsp;&nbsp;&nbsp;<span style='color:#8f08c4;'>if</span>&nbsp;(!<span style='color:#74531f;'>IsFileValid</span>(<span style='color:#1f377f;'>file</span>))<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style='color:#8f08c4;'>return</span>&nbsp;<span style='color:blue;'>false</span>;<br/><br/> &nbsp;&nbsp;&nbsp;&nbsp;SaveFileToDisk(<span style='color:#1f377f;'>file</span>);<br/> &nbsp;&nbsp;&nbsp;&nbsp;<span style='color:#8f08c4;'>return</span>&nbsp;<span style='color:blue;'>true</span>;<br/> }<br/><br/> <span style='color:blue;'>public</span>&nbsp;<span style='color:blue;'>bool</span>&nbsp;<span style='color:#74531f;'>IsFileValid</span>(<span style='color:#2b91af;'>File</span>&nbsp;<span style='color:#1f377f;'>file</span>)<br/> {<br/> &nbsp;&nbsp;&nbsp;&nbsp;<span style='color:#8f08c4;'>return</span>&nbsp;<span style='color:#1f377f;'>file</span>.Extension&nbsp;==&nbsp;<span style='color:#a31515;'>&quot;pdf&quot;</span>;<br/> }<br/> </span></p> <p>В последствии метод валидации без проблем может быть повторно использован сколько угодно раз. А теперь представьте, что у вас таких методов сотни. Экономия времени будет существенной.</p>","Created":{"$date":{"$numberLong":"1579860600000"}},"Description":"Скорость написания программистом кода является одним из важнейших показателей его работы. Ведь чем быстрее программист пишет код, тем быстрее он воплощает требования своего заказчика в жизнь.","Type":{"$numberInt":"2"},"Views":{"$numberInt":"233"},"CommentsCount":{"$numberInt":"0"},"WhoDisliked":[],"WhoLiked":["5de3a5147dd2f600019789ba"],"Similar":[{"Title":"Как стать более ценным программистом","Url":"kak-stat-bolee-cennym-programmistom"},{"Title":"Как программисту писать качественный код, следуя лишь одному правилу","Url":"kak-programmistu-pisat-kachestvennyj-kod"},{"Title":"Пишут ли программисты код?","Url":"pishut-li-programmisty-kod"}],"Tags":["oop","quality","programming"]}
{"_id":{"$oid":"5e3163f9264c0bcdade827bf"},"Title":"Идеальный базовый набор знаний каждого молодого программиста в независимости от специализации","Url":"bazovye-znania-programmista","Text":"<p>Кто-нибудь может сосчитать количество существующих на сегодняшний день специализаций в разработке программного обеспечения? Java, .NET, Python, Ruby, iOS… Список можно продолжать. Даже в отдельно взятой специализации существуют разделения на более узкие специализации. Например, .NET можно разделить на веб, десктоп и мобильную разработки. Однако даже такое разнообразие направлений объединено немалым количеством общих концепций, методологий, шаблонов и инструментов, которые являются <b>must know</b> для молодых программистов в независимости от их специализации.</p> {ad} <br/><h3>ООП, ФП и Шаблоны проектирования</h3> <p>Парадигмы <i>объектно-ориентированного и функционального программирования и шаблоны проектирования</i> относятся к категории фундаментальных знаний, то есть они не устаревают и не ограничены лишь одним языком программирования или фреймворком.</p> <p>Ключевыми принципами объектно-ориентированного программирования, с которыми нужно разобраться побыстрее, являются <i>Абстракция, Инкапсуляция, Полиморфизм, Наследование</i>. Добавим сюда виды связей между объектами <i>Композицию и Агрегацию</i>, а также GRASP, где особое внимание нужно уделить <i>принципам Сильного сцепления и Слабой связанности</i>. Огромным плюсом также будет почитать о таких пяти принципах Объектно-ориентированного дизайна как <i>SOLID</i>.</p> <p>Касательно шаблонов проектирования. Молодому разработчику достаточно разобраться с ключевыми GoF шаблонами, такими как <i>Одиночка, Фабричный метод, Стратегия, Декоратор, Фасад</i>, а остальные постигать по мере необходимости в процессе работы.</p> <p>Несмотря на то, что вероятнее всего 95% читателей данной статьи используют или планируют использовать в своей работе исключительно объектно-ориентированные языки программирования, знание принципов функционального программирования будет огромным плюсом. Такие принципы ФП как <i>Неизменяемость, Функции высшего порядка, Чистые функции</i> не являются чем-то сложным и могут быть легко имплементированы в объектно-ориентированном коде, что только улучшит его качество.</p> <ul><li><a href='https://habr.com/ru/post/463125/'>ООП в картинках</a></li><li><a href='https://refactoring.guru/ru/design-patterns'>Паттерны проектирования</a></li><li><a href='https://tproger.ru/translations/functional-programming-concepts/'>Основные принципы программирования: функциональное программирование</a></li></ul><h3>Качество кода и Понятие рефакторинга</h3> <p>Существует немалое количество техник, шаблонов и инструментов, позволяющих получить качественный код. От молодого программиста обычно ожидают <i>владением стандартами кодирования, правилами именования и форматирования кода</i> используемого языка программирования. Также не менее важно понимать идею <i>Рефакторинга, основных “Запахов кода” (Длинный метод, Длинный список параметров, Дублирование кода, Временное поле и другие)</i>, а также способов их устранения.</p> <p>Большим плюсом для молодого программиста будет понимание <i>процесса Код-ревью</i> и его инструментов, а также понятия <i>Статический анализ кода</i>.</p> <ul><li><a href='https://refactoring.guru/ru/refactoring/smells'>Запахи кода</a></li><li><a href='https://refactoring.guru/ru/refactoring'>Рефакторинг: говнокод → конфетка</a></li><li><a href='https://habr.com/ru/company/badoo/blog/413965/'>Code review: вы делаете это неправильно</a></li><li><a href='https://software.intel.com/ru-ru/articles/Static-code-analysis-ru'>Статический анализ кода</a></li></ul><h3>Алгоритмы и Структуры данных</h3> <p>Очередная фундаментальная тема. Знание структур данных и алгоритмов позволит писать код в наиболее оптимальный способ. Такой код будет быстро работать, эффективно используя ресурсы компьютера. Код, написанный с использованием алгоритмов и структур данных в конце концов будет выглядеть понятно и лаконично, что важно при работе в команде.</p> <p>В качестве подтверждения слов выше, рассмотрим такую задачу: существует набор отсортированных в алфавитном порядке имен, в который нужно вставлять новые имена, сохраняя алфавитный порядок. Если решать задачу простым перебором от начала списка с целью найти подходящее место для вставки имени, то время выполнения будет в разы дольше, чем при использовании алгоритма <i>Бинарный поиск</i>.</p> <p>К основным структурам данных относятся <i>Массив, Список, Хеш-таблица, Стек, Очередь, Списки, Деревья</i>, а к основным алгоритмам - <i>Линейный поиск, Бинарный поиск, Алгоритмы сортировок и Алгоритмы поиска в деревьях (Поиск в ширину BFS и Поиск в глубину DFS)</i>. Добавим ко всему еще понимание сложности алгоритмов <i>Big O нотацию</i> и ее основные величины - <i>O(1), O(log n), O(n) и O(n в квадрате)</i>.</p> <ul><li><a href='https://tproger.ru/translations/algorithms-and-data-structures/'>Алгоритмы и структуры данных для начинающих: сложность алгоритмов</a></li></ul><h3>Основы реляционных и нереляционных баз данных</h3> <p>На первых стадиях изучения реляционных баз данных (MySQL, PostgreSQL или MS SQL) начинайте с таких ключевых концепций как <i>Таблицы, Первичные и Внешние ключи, Виды отношений (Один ко многим, Многие ко многим, Один к одному), Идея нормализации данных, Нормальные формы (Достаточно первые 3), Транзакции и свойства ACID</i>.</p> <p>После изучения вышеперечисленных концепций, посмотрите в чем заключается идея такого инструмента как <i>Денормализация данных</i> и как ее выполнять. Познакомьтесь с понятием и необходимостью <i>NoSQL</i>, а также с фундаментальными отличиями SQL от NoSQL.</p> <p>Узнайте какие существуют инструменты доступа к данным <i>ORM (например, NHibernate или Entity Framework)</i> в вашем технологическом стеке и разберитесь с их основными возможностями.</p> <ul><li><a href='https://aws.amazon.com/ru/relational-database/'>Что такое реляционная база данных?</a></li><li><a href='https://tproger.ru/translations/sql-vs-nosql/'>SQL против NoSQL на примере MySQL и MongoDB</a></li><li><a href='http://internetka.in.ua/orm-intro/'>Введение в ORM (Object Relational Mapping)</a></li></ul><h3>Многопоточность и Асинхронное программирование</h3> <p>Асинхронное программирование и Многопоточность являются мощными инструментами, которые помогут программисту значительно эффективнее использовать ресурсы операционной системы. Однако оба инструмента сложны в использовании и требуют осторожного c ними обращения. По этой причине от молодых программистов обычно ожидают понимания следующих базовых концепций: <i>1) Отличие Многопоточности от Асинхронного программирования и необходимость их применения, 2) Понимания терминов Процесс, Поток, Пул потоков 3) Понимание идеи синхронизации потоков и знание простых конструкций синхронизации</i>.</p> <ul><li><a href='https://ru.stackoverflow.com/questions/445768/%d0%9c%d0%bd%d0%be%d0%b3%d0%be%d0%bf%d0%be%d1%82%d0%be%d1%87%d0%bd%d0%be%d0%b5-vs-%d0%b0%d1%81%d0%b8%d0%bd%d1%85%d1%80%d0%be%d0%bd%d0%bd%d0%be%d0%b5-%d0%bf%d1%80%d0%be%d0%b3%d1%80%d0%b0%d0%bc%d0%bc%d0%b8%d1%80%d0%be%d0%b2%d0%b0%d0%bd%d0%b8%d0%b5'>Многопоточное vs асинхронное программирование</a></li><li><a href='https://proglib.io/p/asynchrony/'>Асинхронное программирование: концепция, реализация, примеры</a></li><li><a href='https://tproger.ru/problems/what-is-the-difference-between-threads-and-processes/'>В чем разница между потоком и процессом?</a></li></ul><h3>Функциональные и не функциональные требования</h3> <p>На первый взгляд вопрос требований к программным продуктам (Software Requirments) выглядит достаточно простым и очевидным для молодых программистов: заказчик должен предоставить полные, точные, непротиворечивые требования к программе, которую он рассчитывает получить. Однако очевидно все только с таким видом требований, как <i>функциональные требования</i> (например, по какой формуле программа должна рассчитывать доход; должно ли отправляться письмо с подтверждением заказа и т.д.). Но существует иная категория требований - <i>нефункциональные требования</i>, примерами которых являются Быстродействие, Доступность, Масштабируемость и многие другие. Такие требования заказчик, как человек нетехнический, часто может просто не документировать.</p> <p>Безусловно, определением нефункциональных требований занимаются технические лидеры проекта или архитекторы. Однако молодому программисту хорошо бы знать о существовании нефункциональных требований, чтобы не думать, что если в описании функционала отсутствует, например, четкое требование по времени отклика при нажатии гиперссылки, то такое время может быть каким угодно долгим.</p> <ul><li><a href='https://studfile.net/preview/2152457/page:4/'>Функциональные и нефункциональные требования</a></li></ul><h3>Техники оценки времени выполнения работ (Эстимации)</h3> <p>Уже с первых дней работы программисты сталкиваются с необходимостью эстимировать свою работу. Отличным способом дать приближенную к реальной оценку времени выполнения своей работы будет использование техники <i>Оценки по аналогии (Analogy-based Estimation)</i>. То есть программист дает эстимейт, используя свой предыдущий опыт решения подобных задач. Молодые программисты без большого опыта за плечами не смогут эффективно использовать данную технику. Поэтому необходимо знать и использовать другие техники: <i>Декомпозиция, 3-Point эстимейт либо “попросить коллегу с опытом помочь вам с эстимейтом”</i>.</p> <p>Плюсом будет понимание техники оценки в <i>Стори-поинтах</i> и в чем отличия от оценки в <i>человеко-часах/идеальных часах</i>. Также не будет лишним понимать к каким последствиям приводят заниженные или завышенные эстимейты.</p> <ul><li><a href='https://dev.by/news/12-sovetov-po-estimatsii-proektov-po-razrabotke-ot-praktikuyuschih-preseyl-spetsialistov'>12 советов по эстимации проектов по разработке от практикующих пресейл-специалистов</a></li><li><a href='https://habr.com/ru/post/248325/'>Как выполнять оценку по трём точкам?</a></li><li><a href='https://dou.ua/lenta/articles/estimate-development-time/'>Как оценить часы на разработку</a></li></ul><h3>Методологии разработки ПО</h3> <p>Разработка программного обеспечения, как и разработка чего угодно сложного, выполняется по определенным общепринятым процессам. Такие процессы делят весь путь разработки ПО на определенные стадии, определяют условия перехода из одной стадии в другую, описывают как часто участники разработки должны коммуницировать друг с другом и так далее. К популярным методологиям сегодня относят <i>Scrum и Kanban</i>. Методология Scrum больше полезна при активной разработке новых проектов, а Kanban для поддержания существующих. Обе методологии относятся к семейству гибких (Agile) методологий.</p> <p>В чистом виде методологии Scrum и Kanban могут не использоваться. Часто проекты адаптируют их под свои реалии, вместо слепого следования учебникам. Также не редко на практике совмещают методологии Scrum и Kanban с целью выжать лучшее из обеих.</p> <p>Перед началом знакомства с методологиями Scrum и Kanban, необходимо ознакомиться со <i>стадиями разработки программного обеспечения, такими как Сбор требований, Проектирование, Написание кода, Тестирование, Развертывание, Поддержка</i>. Также будет плюсом знакомство с методологией Waterfall и разбор ее слабых сторон.</p>  <ul><li><a href='https://habr.com/ru/company/hygger/blog/351048/'>Scrum vs Kanban: в чем разница и что выбрать?</a></li><li><a href='https://www.edsd.ru/ru/princypy/cikl_razrabotki_po'>Цикл и этапы разработки программного обеспечения</a></li></ul> <h3>Использование системы контроля версий</h3> <p>Система контроля версий (например, Git) является таким инструментом, который программист обычно начинает использовать с первого дня работы в IT-компании. Следовательно, понимание принципов работы систем контроля версий может сэкономить вам много времени и нервов. Разберитесь с фундаментальными концепциями системы Git, к которым относятся <i>Repository, Branch, Working Copy, Commit, Pull, Fetch, Push, Pull Request</i>. Разберитесь с причинами возникновения merge-конфликтов и способами их устранения.</p> <p>Большим плюсом будет понимание разницы между Централизованными и Распределенными системами контроля версий, а также какими конкретно инструментами они представлены на рынке.</p><ul><li><a href='https://githowto.com/ru'>Git How To: курс обучения Git на русском</a></li></ul> <h3>Другое</h3> <p>Если вы закончили с изучением всего вышеперечисленного или просто не нашли там для себя ничего нового, то посмотрите в сторону еще нескольких тем, которые с вероятностью 99% коснутся вас при программировании на .NET, Java, Python и других:</p> <ul> <li>Принципы юнит-тестирования: черные, белые, серые ящики; понятия test suite и test case; принципы F.I.R.S.T.; виды тестовых заглушек... </li> <li>Безопасность данных, Криптография: Концепции аутентификации и авторизации, Алгоритмы шифрования данных (Симметричное и Ассиметричное шифрование), OWASP...</li> <li>Компьютерные сети и Протоколы: Понимание моделей OSI и TCP/IP, Понимание HTTP протокола и модели Клиент-Сервер; HTTP vs HTTPS; Понимание DNS; Понимание FTP протокола...</li> </ul> <p>Счастливого обучения!</p>","Created":{"$date":{"$numberLong":"1580303400000"}},"Description":"Java, .NET, Python, Ruby, iOS и другие направления объединены немалым количеством общих концепций, методологий, шаблонов и инструментов, которые являются must know для молодых программистов в независимости от их специализации.","Type":{"$numberInt":"2"},"Views":{"$numberInt":"340"},"CommentsCount":{"$numberInt":"1"},"WhoDisliked":[],"WhoLiked":["5ddfe9e6048adc000129511e","5de3a5147dd2f600019789ba","5e3803a5a8ca930001e0f0a7"],"Similar":[{"Title":"Карта знаний JS-Frontend программиста","Url":"js"},{"Title":"Карта знаний .NET Web программиста","Url":"dotnetweb"}],"Tags":["oop","quality","programming","rabotaprogrammista","learning","algorithms","estimate"]}
{"_id":{"$oid":"5e3beba1264c0bcdadebb97a"},"Title":"Как писать быстродействующий код: Часть 1","Url":"kak-pisat-bystrodejstvuyushij-kod-1","Text":"<p>Одним из важнейших качеств современного программного обеспечения является его быстродействие. В первой части данной статьи мы собрали пятерку рекомендаций по написанию быстродействующих программных систем без сильной привязки к конкретным технологическим стекам.</p> {ad} <br/> <h3>Контроль объема аллокаций в управляемую кучу</h3> <p>Несмотря на факт наличия сборщиков мусора на всех современных платформах разработки, программисту все равно необходимо думать об аллокациях. Да, программист больше не должен явно освобождать память от созданных им объектов, как было в С++. Однако, бездумно тоннами аллоцировать объекты в управляемую кучу также не вариант, так как вы создадите серьезную нагрузку на сборщик мусора, в результате чего быстродействие вашего приложения может просесть.</p> <p>Аллокации в управляемую память условно могут быть классифицированы на явные и неявные. Явные аллокации - это когда программист осознанно своими руками создает большое количество объектов. В таких случаях можно задуматься, например, об их кешировании с использованием шаблонов <i>Приспособленец (Flyweight) или Пул объектов (Object Pool)</i>.</p> <p>Неявные аллокации - это когда программист использует некоторую программную конструкцию, под капотом которой происходят аллокации. Речь идет об активной работе с неизменяемыми типами данных (например, string), об использовании механизма Замыкания (Clojures) и других. От неявных аллокаций программиста может спасти в целом хорошее знание используемого языка программирования, а в частности тема управления памятью. Для ознакомления с конкретными операциями, которые приводят к аллокациям в вашем языке программирования, проведите исследование в Google по следующему поисковому запросу: <h4>&quot;<Ваш язык программирования здесь> memory management&quot;</h4> <ul> <li><a href='https://ru.wikipedia.org/wiki/%D0%A1%D0%B1%D0%BE%D1%80%D0%BA%D0%B0_%D0%BC%D1%83%D1%81%D0%BE%D1%80%D0%B0' target='_blank' rel='nofollow noopener'>Сборка мусора</a></li> <li><a href='https://habr.com/ru/post/270009/' target='_blank' rel='nofollow noopener'>Управление памятью: Взгляд изнутри</a></li> </ul> <h3>Использование кеширования в приложении</h3> <p>Кеширование является невероятно обширной темой, которая достойна целой книги. Задача кеширования - заставить ваше приложение работать быстрее путем уменьшения количества запросов от клиента к источнику данных. Кеширование может выполняться на большом количестве уровней, начиная от баз данных и заканчивая браузером. Веб программист обычно применяет кеширование на уровне приложения (бекенд) и на уровне клиента (браузера). На уровне приложения программист кеширует данные, прочитанные из базы данных. На уровнае клиента обычно кешируются статические .js и .css файлы, но могут кешироваться и динамические редко модифицируемые данные с целью уменьшения количества запросов на веб-сервер.</p> <p>Любой тип кеширования увеличивает сложность вашего приложения. Во-первых, реализация кеширования - это дополнительная функциональность в которой, как и в любой другой могут быть дефекты. Во вторых самая идея кеширования подразумевает хранение нескольких копий данных, что требует дополнительных усилий по их синхронизации.</p> <p>Вы можете начать знакомство с кешированием на стороне бекенда со следующих шаблонов: Приспособленец (Flyweight), Пул объектов (Object Pool), а также шаблона Cache-aside.</p> <ul> <li><a href='https://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BD%D1%8B%D0%B9_%D0%BF%D1%83%D0%BB' target='_blank' rel='nofollow noopener'>Объектный пул</a></li> <li><a href='https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%B8%D1%81%D0%BF%D0%BE%D1%81%D0%BE%D0%B1%D0%BB%D0%B5%D0%BD%D0%B5%D1%86_(%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)' target='_blank' rel='nofollow noopener'>Приспособленец</a></li> <li><a href='https://habr.com/en/post/168725/comments/?mobile=no' target='_blank' rel='nofollow noopener'>Стратегия кеширования в приложении</a></li> </ul>  <h3>Знание структур данных</h3> <p>В программировании существует большое разнообразие структур данных. Самой простой структурой является <i>Массив</i>, который имеет фиксированную длину с возможностью обращаться к его элементам по индексу. Чуть более сложными являются такие структуры данных как <i>Стек, Очереди, Списки, Хеш-таблица, Множества, Деревья, Графы</i>, а также многочисленные подвиды многих перечисленных структур. Такое разнообразие доступно программисту по одной простой причине - каждая структура данных оптимизирована под конкретный вид задач. Если формулировать точнее, то любая задача может быть решена при помощи любой структуры данных. Однако от выбора вами структуры данных наобум может серьезно просесть быстродействие вашего кода.</p> <p>Простой пример: вам необходимо хранить в памяти последовательность некоторых элементов, в которую часто необходимо добавлять новые элементы. Вы можете решить данную задачу при помощи Массива. Однако массивы имеют одну особенность: размер массивов определяется на стадии компиляции программы и не может быть изменен во время ее выполнения. То есть вы сможете &quot;добавлять&quot; в массив новые элементы, постоянно пересоздавая массив при каждой вставке нового элемента. Решает ли Массив поставленную задачу? Да. Решает ли массив поставленную задачу оптимально? Нет.</p> <p>Каждая структура данных имеет свои достоинства и недостатки: например, к элементам массива можно обратиться по индексу, но вставка нового элемента невозможна; в односвязный или двусвязный списки можно вставить новый элемент за константное время, но поиск конкретного элемента осуществляется только полным перебором; хеш-таблица позволяет быстро доступиться к элементу по ключу, но обращение по индексу не поддерживается. Выбирая структуру данных, сопоставьте ваши требования с достоинствами и недостатками имеющихся в вашем распоряжении структур данных и сделайте выбор в пользу максимально соответствующей единицы.</p> <ul> <li><a href='https://habr.com/ru/company/alconost/blog/419685/' target='_blank' rel='nofollow noopener'> Важнейшие структуры данных, которые вам следует знать к своему собеседованию по программированию</a></li> <li><a href='https://dou.ua/lenta/articles/algorithms-and-structures/' target='_blank' rel='nofollow noopener'>Нужны ли программисту алгоритмы и структуры данных</a></li> </ul> <h3>Знание алгоритмов</h3> <p>C алгоритмами тут все очень похоже на структуры данных. Большинство задач может быть решено при помощи очень простых алгоритмов, освоение которых не займет у вас много времени. Отсортировать любой массов можно при помощи пузырьковой сортировки. Для поиска объекта в Бинарном дереве, можно конвертировать дерево в список и воспользоваться простым перебором, то есть Линейным поиском. Однако такие примитивные подходы могут эффективно работать только <b>на небольшом количестве данных</b>. На больших коллекциях простые алгоритмы будут выполняться медленно.</p> <p>Хороший алгоритм требует минимум процессорного времени и эффективно распоряжается оперативной памятью. Алгоритмы тесно связаны со структурами данных. Большая часть алгоритмов выполняется непосредственно на структурах данных. К алгоритмам, знание которых могут улучшить производительность вашего кода, относятся <i>Бинарный поиск, Поиск в глубину, Поиск в ширину, Алгоритмы сортировок (Быстрая сортировка, Сортировка слиянием)</i> и другие.</p> <ul> <li><a href='https://www.bigocheatsheet.com/' target='_blank' rel='nofollow noopener'>Know Thy Complexities!</a></li> <li><a href='https://postnauka.ru/books/96975' target='_blank' rel='nofollow noopener'>6 книг об алгоритмах и структурах данных</a></li> <li><a href='https://habr.com/ru/post/279453/' target='_blank' rel='nofollow noopener'>Зачем программисту знать алгоритмы</a></li> </ul> <h3>Умеренная нормализация баз данных</h3> <p>С понятием <i>Нормализация</i> и <i>Нормальные формы</i> программисты обычно сталкиваются еще в самом начале изучения реляционных баз данных. Первая нормальная форма говорит о необходимости хранить в ячейке только атомарное значение, вторая - о зависимости всех колонок от первичного ключа, третья - об отсутствии транзитивных зависимостей и так далее. Нормализация является важной фундаментальной концепцией, которая позволяет уменьшить избыточность (дублирование) данных. Однако нормализация не лишена недостатков, одним из которых является уменьшение скорости выполнения SELECT запросов. Следование нормальным формам непременно ведет, например, к появлению большего количества таблиц, соединение которых операторами INNER JOIN, LEFT JOIN и другими будет негативно влиять на производительность приложения.</p> <p>Решить проблему с производительностью можно при помощи <i>Денормализации</i>. Простыми техниками денормализации являются: 1) объединение нескольких связанных таблиц в одну, 2) предварительное вычисление значений и сохранение их в отдельных колонках.</p> <p>Не стоит забывать о том, что Денормализация данных приводит к проблемам, которые решает Нормализация. Следовательно, необходимо искать баланс между двумя концепциями, анализируя особенности конкретно своего проекта. Как отправную точку для ваших размышлений посмотрите на рекомендации ниже.</p> <p>Используйте Нормализацию когда: 1) Ваше приложение часто обновляет данные в базе данных; 2) Целостность данных критична для вашего приложения (например, банковская сфера) 3) К вашему приложению не предъявляются высокие требования по быстродействию.</p> <p>Используйте Денормализацию когда: 1) Ваше приложение редко обновляет данные в базе данных, но часто их читает; 2) Целостность данных не критична для вашего приложения (например, блог) 3) Вы применили уже все другие техники оптимизации производительности (оптимизация запросов, создание индексов, кеширование), но не достигли желаемого результата.</p> <ul> <li><a href='https://support.microsoft.com/ru-ru/help/283878/description-of-the-database-normalization-basics' target='_blank' rel='nofollow noopener'>Описание основных приемов нормализации базы данных</a></li> <li><a href='https://habr.com/ru/post/64524/' target='_blank' rel='nofollow noopener'>Денормализация БД. Зачем? Когда? Как?</a></li> <li><a href='https://github.com/codedokode/pasta/blob/master/db/normalization.md' target='_blank' rel='nofollow noopener'>Нормализация баз данных</a></li> </ul> <p>Во второй части статьи мы разберем вторую пятерку рекомендаций по созданию быстрых программ. Подписывайтесь в группы Телеграм, Фейсбук и ВКонтакте, чтобы ничего не пропустить.</p>","Created":{"$date":{"$numberLong":"1580984400000"}},"Description":"Рассмотрим 5 рекомендаций по написанию быстродействующего кода, которые можно применять в любом технологическом стеке.","Type":{"$numberInt":"2"},"Views":{"$numberInt":"194"},"CommentsCount":{"$numberInt":"0"},"WhoDisliked":[],"WhoLiked":["5ddfa425048adc0001295115","5ddfe9e6048adc000129511e"],"Similar":[{"Title":"Как программисту быстрее писать код: 3 простых совета","Url":"3-soveta-kak-programirovat-bystree"},{"Title":"Как программисту писать качественный код, следуя лишь одному правилу","Url":"kak-programmistu-pisat-kachestvennyj-kod"}],"Tags":["programming","algorithms","performance","databases"]}
{"_id":{"$oid":"5e413391264c0bcdaded6db8"},"Title":"Практический опыт программиста: как получить и как совершенствовать","Url":"prakticheskij-opyt-programmista","Text":"<p>Обучение программированию условно можно поделить на две итеративные стадии: 1) сначала программист получает теоретические знания, 2) после чего переходит к их применению на практике, то есть получает практический опыт. Без практики далеко не уедешь. Практические навыки, то есть знания и умения решать реальные задачи требуются всем программистам от начинающих до самых опытных. И если у трудоустроенного программиста вопрос <i>“Как получить практические навыки?”</i> уже не стоит остро, то начинающего программиста такой же вопрос может приводить к хаотичным скитаниям из стороны в сторону и даже быть причиной уныния. Ведь не редко причиной отказа в трудоустройстве даже при наличии хороших теоретических знаний является отсутствие практического опыта, так как далеко не каждая компания готова брать на обучение интерна. Но такая проблема имеет несколько способов решения.</p> {ad} <br/> <h3>Анализ кода Open Source проектов</h3> <p>Open Source проекты - это проекты с открытым исходным кодом. То есть код полноценного работающего проекта открыт для публичного доступа и его можно скачать на свой компьютер и запустить. Open Source проекты являются прекрасным источником практических знаний не только для начинающих, но и для опытных программистов. Все что вам необходимо сделать, так это найти такие проекты для своего языка программирования в Google (“Проекты с открытым исходным кодом для <Ваш язык программирования>”) и начать изучать их исходный код. Анализ кода Open Source проектов позволит вам понять как именно на практике реализуются шаблоны проектирования, механизм внедрения зависимостей, алгоритмы и многое другое.</p> <p>Хорошим примером Open Source проекта для .NET программиста является платформа <a href='https://github.com/nopSolutions/nopCommerce' target='_blank'>NopCommerce</a>. Платформа представляет собой интернет-магазин, который написан с использованием самых новых технологий. Скачав и запустив проект на своем компьютере, вы можете начать изучать как устроена определенная функциональность проекта (например, поиск товаров по сайту), начиная с UI и заканчивая базой данных. Либо вы можете начать изучение с анализа архитектуры проекта. Либо вы можете просматривать файл за файлом и искать интересный вам код и модифицировать его. Подумайте какая модель на данном этапе вам подходит больше всего.</p> <p>Анализ кода Open Source проектов позволит вам совершить огромный сдвиг в сторону практических знаний, даже если вы не напишете ни строчки кода. Главная цель - это увидеть и проанализировать как тот или иной механизм реализуется в реальных проектах и Open Source проекты вам точно помогут.</p> <h3>Разработка собственного проекта</h3> <p>О разработке собственного проекта мы писали в посте <a href='/post/kak-programmistu-bez-opyta-nayti-rabotu'>Как найти работу программиста без опыта?</a>. Разработать собственный проект необходимо сразу по нескольким причинам: <i>1) закрепление имеющихся теоретических знаний на практике, 2) возможность продемонстрировать свой проект на собеседовании, 3) возможность столкнуться с новыми задачами и получить новые знания</i>. </p> <p>Еще на самой первой стадии разработки своего проекта - при поиске идеи для проекта, найдите такую идею, которая бы вам нравилась. В идеале вы должны начать делать такой проект, которым бы вы или ваши друзья пользовались в будущем. Именно такой подход позволит вам вовлечь себя в работу и достичь главного критерия собственного проекта - <b>завершенность</b>. Вы можете начать разрабатывать игру крестики-нолики, утилиту для копирования файлов между двумя папками или интернет-магазин. Вне зависимости от тематики вашей программы, она должна как минимум (!) компилироваться, запускаться и реализовывать самую базовую функциональность подобных программ.</p> <h3>Решение задач</h3> <p>Решение небольших задач по программированию в плане получения практических навыков подходит для начинающих программистов не меньше, чем анализ Open Source проектов или разработка собственных. В первые месяцы работы на первой работе программист как раз и занимается решением маленьких задач типа “Написать функцию, которая сохранит данные в файл” или “Написать SQL запрос, который вернет определенные данные из таблицы”. Набить руку в решении подобных задач могут помочь специальные онлайн-платформы, которые предоставляют вам большое количество задач и автоматически проверяют ваши решения на правильность и оптимальность.</p> <p>К перечню таких платформ относятся <a href='https://leetcode.com/' target='_blank'>LeetCode</a>, <a href='https://www.coderbyte.com/' target='_blank'>CoderByte</a>, <a href='https://www.hackerrank.com/dashboard' target='_blank'>HackerRank</a> и другие. Там вы сможете как решать задачи самостоятельно, так и при необходимости подсматривать готовые лучшие решения других участников.</p> <p>Разумеется, каждый из трех перечисленных выше подходов обладает своими плюсами и минусами. Значит, лучшим способом обретения комплексного практического опыта будет комбинация всех трех подходов. Например, разрабатывая свой проект, посматривайте на техники и подходы Open Source проектов и перенимайте их, реализуйте в собственном проекте. И параллельно выполняйте ежедневно по паре задач на специализированных платформах.</p> <p>Счастливого обучения!</p> ","Created":{"$date":{"$numberLong":"1581337200000"}},"Description":"Рассмотрим несколько способов обретения практического опыта, которыми может воспользоваться каждый начинающий программист.","Type":{"$numberInt":"2"},"Views":{"$numberInt":"88"},"CommentsCount":{"$numberInt":"0"},"WhoDisliked":[],"WhoLiked":["5ddfe9e6048adc000129511e"],"Similar":[{"Title":"Идеальный базовый набор знаний каждого молодого программиста в независимости от специализации","Url":"bazovye-znania-programmista"},{"Title":"Как программисту писать качественный код, следуя лишь одному правилу","Url":"kak-programmistu-pisat-kachestvennyj-kod"},{"Title":"Что необходимо минимально знать каждому хорошему программисту?","Url":"chto-dolzhen-minimalno-znat-kazhdyj-khoroshij-programmist"}],"Tags":["programming","learning"]}
