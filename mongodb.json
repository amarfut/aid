{"_id":{"$oid":"5dbeb7d2cdb700e273c1add8"},"Title":"Пишут ли программисты код?","Url":"pishut-li-programmisty-kod","Text":"<p>Основная работа программиста заключается в написании кода. Именно такого мнения придерживается большинство людей, которые знакомы с программированием в основном из голливудских фильмов, где программист набирает код со скоростью 500 символов в минуту. Код – это первая ассоциация всех людей, включая самих программистов, которая приходит в голову при слове “программирование”. Но действительно ли написание кода является ключевым аспектом в программировании? Давайте разбираться.</p> <p>Для начала уясним для чего вообще предназначено программирование. Оно предназначено для решения реальных человеческих проблем, таких как поиск оптимального маршрута перелета между странами, прогноз курса валют, заказ товаров на дом и многих других. Инструментом для решения таких задач является программный код, который как и любой другой инструмент бесполезен, пока нет проработанного видения решения и четкого плана работ. Следовательно, перед тем как приступать к написанию программного кода, задача должна быть полностью решена в голове. </p> <p>Ведь когда некоторый заказчик ставит перед программистом задачу – то программист не приступает немедленно к написанию кода. Вначале программист должен переварить требования заказчика, решить задачу у себя в голове, изобразить решение схематически на доске или клочке бумаги, найти как можно больше слабых мест своего же решения, улучшить свое решение. И только после того как задача решена на бумаге, можно приступать к написанию кода.</p>  <p>Например, перед имплементацией такого сервиса как Instagram, программист должен спроектировать отдельные сервисы для загрузки и чтения изображений, спроектировать схему хранилища для самих изображений и их метаданных, продумать механизмы репликации, резервного копирования, кеширования, обновления данных в реальном времени, балансировку нагрузки и много другого.</p>  <p>Даже имплементация чего-то более простого, как например функционала регистрации пользователей, требует проектирования таблиц базы данных для хранения информации о пользователях, проектирования классов и методов, которые будут отвечать за сохранение и извлечение данных из базы, продумывания валидации, обработки ошибок, пользовательского интерфейса, формата передачи данных между клиентом и сервером и так далее.</p>    <p>Написать код по готовой задаче может и вчерашний выпускник компьютерной академии, а грамотно спроектировать задачу может только программист, обладающий большим опытом, аналитическим мышлением и прочными фундаментальными знаниями компьютерных наук.</p>","Created":{"$date":{"$numberLong":"1572724800000"}},"Type":{"$numberInt":"2"},"CommentsCount":{"$numberInt":"15"},"Views":{"$numberInt":"87"},"WhoDisliked":["5dc2db2a8757be2a1cfb9db9"],"WhoLiked":[]}
{"_id":{"$oid":"5dbeb8c3cdb700e273c1ae1b"},"Title":"Причины появления спагетти-кода","Url":"prichiny-poyavleniya-spagetti-koda","Text":"<p>Спагетти-кодом обычно называют очень запутанный, неразборчивый программный код, чтение которого вызывает только раздражение и злость. Программисту обычно требуется минимум в несколько раз больше времени на чтение спагетти-кода, чем хорошего структурированного кода. В спагетти-код крайне опасно вносить изменения, так как это может привести к непредсказуемым ошибкам в работе всей программы. Спагетти-код далеко не является редкостью в современной IT индустрии. Множество программ имеют в себе фрагменты спагетти-кода, что приводит к увеличению стоимости программного обеспечения, а также мягко говоря к недовольству программистов, которым приходится с таким наследием работать. Так каковы же причины появления спагетти? Давайте разбираться.</p><p>Первая причина появления спагетти заключается в ходе мышления программиста, во время имплементации задачи. Ведь на самом деле любой программный код отражает ход мыслей того программиста, который его писал. И если в голове человека во время написания кода был бардак, то программный код непременно покажет действительность.</p><p>Представьте человека, которому необходимо попасть из точки А в точку B по кратчайшему пути. Если перед началом движения человек хорошо подумает свой путь и изучит карту, то вероятно он преодолеет расстояние максимально быстро. Но если путешественник начнет идти наобум безо всякого планирования, то его путь будет крайне запутанным и даже до пунтка назначения можно не добраться и вовсе.</p><p>Вторая причина появления спагетти заключается в банальной Нехватке времени и Спешке. Программист может обладать прекрасным аналитическим мышлением, большим опытом и знаниями, однако он все равно может писать спагетти-код, если ему не хватает времени на предварительное обдумывание своего решения. А спешить программисты могут например по причине спешки заказчика, который боится проиграть своим конкурентам.</p><p>В современных IT реалиях тяжело выделить какую-то одну причину появления спагетти-кода - обе они занимают равноправные позиции.</p> <p>Для борьбы со спагетти-кодом используют статические анализаторы кода. Они способны просканировать всю кодовую базу проекта, которая обычно составляет сотни тысяч строк кода, и показать в каких же местах завалялось протухшее спагетти. После обнаружения спагетти, программисты начинают процесс рефакторинга, цель которого улучшить качество кода, не повлияв на поведение программы. В итоге после успешного рефакторинга, спагетти-код из запутанного и нечитабельного превращается в структурированный и понятный, то есть в лазанья-код.</p>","Created":{"$date":{"$numberLong":"1572728400000"}},"Type":{"$numberInt":"2"},"CommentsCount":{"$numberInt":"2"},"Views":{"$numberInt":"2026"},"WhoDisliked":[],"WhoLiked":["5dc2db2a8757be2a1cfb9db9"]}
{"_id":{"$oid":"5dbecc34cdb700e273c1b326"},"Title":"Какой тип IT-компании выбрать программисту?","Url":"kakoy-tip-it-kompanii-vybrat-programmistu","Text":"<p>Компании по разработке программного обеспечения можно разделить на три больших группы, а именно <b>аутсорсинговые компании</b>, <b>продуктовые компании</b> и <b>аутстаффинговые компании</b>. В чем их сходства и отличия? Давайте разбираться.</p> <p>Аутсорсинговая компания (outsourcing) - занимается разработкой программного обеспечения, а также поддержкой и обслуживанием программного обеспечения от различных заказчиков. Успех компании полностью зависит от количества привлеченных заказчиков и их уровня. Аутсорсинговая компания зарабатывает на разнице между тем, что платит заказчик компании и тем, что компания платит программисту. В большой аутсорсинговой компании есть возможность часто менять проекты, что позволяет получить расширить опыт в технологиях и в подходах разработки программного обеспечения. К недостаткам аутсорса относится большая вероятность работы с некачественным кодом, чем в продуктовых компаниях.</p><p>Продуктовая компания (product) - занимается разработкой своего собственного продукта или нескольких продуктов. Часто такая компания нанимает специалистов, которые необходимы на всех этапах жизненного цикла программного продукта, начиная от программистов и заканчивая маркетологами. Успех продуктовых компаний зависит от того, как хорошо их продукт продается на рынке. К известным продуктовым компаниям относятся Google, Facebook, Booking и другие. В продуктовых компаниях программист ограничен теми языками программирования и технологиями, при помощи которых разрабатывается продукт, но качество кода обычно на порядок выше, чем в аутсорсе. Также некоторым программистам важно не просто работать и получать деньги за выполненную работу, а стать частью какого-то серьезного и именитого продукта.</p><p>Аутстаффинговые компании (outstaffing) - занимаются простой продажей человеко-часов заказчикам. Аутстаффинговая компания представляет собой обычного посредника между программистом и заказчиком. Программист регулярно коммуницирует с заказчиком и выполняет поставленные заказчиком задачи. Не редко заказчик попросту доукомплектовывает собственную команду программистов, обращаясь в аутстаффинговую компанию. В аутстафинговых компаниях так же как и в аутсорсе существует возможность менять заказчиков. Работа в аутстаффинговых компаниях обычно подходит для матерых программистов, так как необходимо регулярно общаться с заказчиком и отвечать за свои решения непосредственно перед ним. </p>","Created":{"$date":{"$numberLong":"1572732000000"}},"Type":{"$numberInt":"1"},"WhoDisliked":[],"WhoLiked":["5dc2db2a8757be2a1cfb9db9"],"Views":{"$numberInt":"9"},"CommentsCount":{"$numberInt":"1"}}
{"_id":{"$oid":"5dbecc37cdb700e273c1b32c"},"Title":"Не дается обучение программированию?","Url":"ne-dayetsya-obucheniye-programmirovaniyu","Text":"<p>Работая преподавателем в компьютерной академии, я многократно подмечал любопытную особенность. Многие из тех студентов которые начали свое обучение с полного нуля, в течение многих месяцев практически не сдвигались с места в познании программирования. Однако в какой-то один момент, обычно спустя 4-6 месяцев со старта обучения, происходил внезапный и внушительный сдвиг, после которого студенты начинали осваивать новые знания какими-то ранее невиданными ранее темпами. В чем же причина такого резкого сдвига? Давайте разбираться.</p>Несмотря на то, что программирование является точной наукой, оно все равно воспринимается начинающими студентами как нечто абстрактное или даже магическое. Почему так происходит? Смотрите, дело в том, что в процессе чтения и трансформации программного кода во что-то работающее, принимают участие процессор и оперативная память. Процессор выполняет написанные программные команды, изменяя состояние оперативной памяти. Например, процессор понимает что вот такая написанная программистом команда <p>int val = 41;</p> необходима для создания ячейки в оперативной памяти с цифрой 41. <p>Так вот и процессор и оперативная память являются такими вещами, которые нельзя потрогать, рассмотреть под увеличительным стеклом и четко увидеть их работу. По сути программист работает с черным ящиком, в который он отправляет какие-то команды, а они там магическим образом превращаются в функциональные программы.</p> <p>И вот именно с попытками <u>понять черный ящик</u> и связанно многомесячное стояние на месте некоторых людей, которые начинают изучать программирование. И тут главное не бросить обучение до момента, как барьер будет преодолен. Для максимального сокращения время преодоления барьера необходимы картинки. Любая хорошая книга по программированию содержит схематические иллюстрации к тексту, которые например визуализируют результат выполнения программного кода в оперативной памяти компьютера.</p> <p>Вы можете требовать от своего преподавателя иллюстрировать свои объяснения, а также пытаться регулярно рисовать такие иллюстрации самостоятельно. Как уже упоминалось раньше, многие из написанных вами команд изменяют состояние оперативной памяти. Поэтому будет отлично если вы будете рисовать отдельную схематическую иллюстрацию, на все возможные состояния оперативной, которое создается в результате выполнения вашего кода. Например, если вы написали вот такой код который суммирует все элементы массива</p> <p><img src='https://storage.cloud.google.com/youit/ne-dayetsya-obucheniye-programmirovaniyu/1.png' class='image-in-post' /></p> то попробуйте его визуализировать. У вас должно получиться примерно такое: <p><img src='https://storage.cloud.google.com/youit/ne-dayetsya-obucheniye-programmirovaniyu/2.png' class='image-in-post' /></p> <p>И чем больше иллюстраций вы разберете и составите самостоятельно, тем быстрее барьер будет преодолен.</p>","Created":{"$date":{"$numberLong":"1572735600000"}},"Type":{"$numberInt":"3"},"WhoDisliked":["5dc2db2a8757be2a1cfb9db9"],"WhoLiked":[],"Views":{"$numberInt":"5"}}
{"_id":{"$oid":"5dbecc39cdb700e273c1b330"},"Title":"Как программисту без опыта найти работу?","Url":"kak-programmistu-bez-opyta-nayti-rabotu","Text":"<p>Распространенной причиной отказов в трудоустройстве начинающим программистам является отсутствие опыта работы. Безусловно каждой компании необходим человек, способный прийти на работу и сразу без продолжительного обучения начать решать реальные боевые задачи. И подобное положение дел демотивирует некоторых соискателей на дальнейшие поиски. Ведь по факту люди попадают в замкнутый круг, в котором для получения опыта необходимо устроиться на работу, на которую не берут без опыта. Как же разорвать этот круг? Давайте разбираться.</p><p>Одна из особенностей программирования, которой обладает не каждая профессия, заключается в том, что опыт и навыки, приближенные к реальным, можно получить самостоятельно у себя дома сидя за компьютером. Для этого необходимо придумать самому себе какой-нибудь проект, например интернет-магазин или приложение для подсчета калорий, и реализовать его. Ключевым критерием собственного проекта или его еще называют pet-проект, является <b>его завершенность</b>. То есть ваш проект должен как минимум компилироваться и запускаться, а также реализовывать весь основной функционал подобных реальных программ. Например если вы решили сделать интернет-магазин, то в нем должны быть реализованы как минимум следующие функции:</p> <ul><li>отображение товаров по категориям</li> <li>поиск товаров</li><li>корзина заказов</li><li>аутентификация и авторизация пользователей<li>панель администратора для добавления товаров в магазин</li></ul><p>Также важно не просто сделать проект работающий, а сделать его как можно более правильнее с точки зрения лучших практик программирования, стандартов кода, принципов и шаблонов проектирования. Для этого ставьте под сомнение каждое свое микро-решение во время разработки и пытайтесь загуглить как нужно делать правильно. Поверьте, что практически любая задача уже была решена до вас, от не требуется изобретать велосипед, а только уметь уместно использовать стандартные решения. Такой подход отнимет у вас в раза два больше времени на разработку проекта, но позволит вам получить ценные знания, которые помогут вам при прохождении интервью и покажут вас как крайне целеустремленного молодого специалиста.</p>","Created":{"$date":{"$numberLong":"1572811200000"}},"Type":{"$numberInt":"3"},"Views":{"$numberInt":"5"},"CommentsCount":{"$numberInt":"1"},"WhoDisliked":["5dc2db2a8757be2a1cfb9db9"],"WhoLiked":[]}
{"_id":{"$oid":"5dbecc3bcdb700e273c1b334"},"Title":"В чем разница между Junior, Middle и Senior программистами?","Url":"v-chem-raznitsa-mezhdu-junior-middle-i-senior-programmistami","Text":"<p>Программистов обычно классифицируют на три категории по их знаниям и опыту работы, а именно на Junior, Middle и Senior. Какие существуют различия между тремя должностями, давайте разбираться.</p><p>Junior - это программист который имеет небольшой опыт в разработке программного обеспечения, обычно до 1-2 лет. На данном уровне программист должен хорошо знать свой язык программирования, а также хорошо ориентироваться в смежных технологиях. Например, если речь идет о .NET программисте, то он должен знать язык C# а также ориентироваться в многопоточности, реляционных базах данных, модульном тестировании, технологиях ORM, системах контроля версий. Джуниоры могут работать самостоятельно в основном решая мелкие задачи, то есть исправляя дефекты или реализуя маленькие неключевые фрагменты системы. Все остальное выполняется под руководством более опытных коллег.</p><p>Следующим этапом развития в карьере является позиция Middle. Отличие от Джуниор заключается в том, что Мидл может выполнять большой спектр задач уже самостоятельно без надзора опытных коллег, за исключением реализации комплексных компонентов системы.  Мидл достаточно хорошо владеет своим языком программирования и технологиями, неплохо ориентируется в шаблонах и практиках проектирования. Также он понимает основные бизнес-процессы своего заказчика, что позволяет ему реализовывать задачи более осмысленно и замечать просчеты в описанных к функциональности требованиях.</p><p>Следующая позиция это Senior. Senior имеет за спиной серьезный багаж опыта в виде тысяч решенных ранее задач, что позволяет ему принимать правильные технологические решения, а решать проблемы еще до их появления. Senior уже может разрабатывать комплексные компоненты программного обеспечения самостоятельно, а также брать на себя полную ответственность за результат. Синьйору необходимо понимать внутреннее устройство библиотек и фреймворков, которые он использует в своей работе. Хороший синьор помимо технических умений должен иметь также хорошие коммуникативные навыки, ведь ему часто приходится доносить свои мысли другим своим подчиненным и заказчику.</p><p>Стоит отметить, что позиция синьора не является карьерным пределом для программиста. После синьора можно стать техническим лидером либо архитектором. Однако обе эти должности скорее являются не логическим и обязательным шагом в карьере, а шагом немного в сторону с пути программиста. Ведь что технический лидер, что архитектор в силу специфики своих должностей не заняты ежедневным написанием кода - появляется множество дополнительных обязанностей, в числе которых менеджмент, работа с документацией, регулярные коммуникация со стейкхолдерами и другие. По этой причине программист теряет возможность регулярно писать код, а такое положение дел не является приемлемым для настоящего программиста.</p>","Created":{"$date":{"$numberLong":"1572814800000"}},"Type":{"$numberInt":"1"},"WhoDisliked":["5dc2db2a8757be2a1cfb9db9"],"WhoLiked":[],"Views":{"$numberInt":"2"}}
{"_id":{"$oid":"5dbecc3dcdb700e273c1b33a"},"Title":"Cленг программистов в IT","Url":"sleng-programmistov-v-it","Text":"<p>Если вы считаете, что русскоязычный программист в общении со своими коллегами использует русский язык - то это не совсем так. При прослушивании разговора двух программистов на работе, вы скорее всего поймете не более половины их диалога без должной подготовки. И тут дело вовсе не в оперировании техническими терминами или проблемами с дикцией. В чем же дело? Давайте разбираться.</p><p>Все дело в IT-шном сленге, который представляет собой объединение русского языка с вкраплением множества английских слов. Вот несколько фраз на таком сленге:</p><p><i>“Я подконекчусь (to connect) на кол (a call) с кастомером через 5 минут”</i></p><p><i>“Нужно срочно заимплементить (to implement) фичу (a feature) и залить ее на прод (production)”</i></p><p><i>“Этот баг (bug) можно пофиксить (to fix) только оверрайднув (to override) метод”</i></p><p>Как видите, некоторые русские слова заменяются английскими и произносятся на русский лад. Для неподготовленного человека подобный сленг может показаться желанием просто повыпендриваться, показать свою крутость в такой странный способ. Однако причины появления такого сленга кроются совсем в другой плоскости.</p> <p>Дело в том, что программист регулярно контактирует с англоязычной средой - общается с заказчиками на английском, читает документацию. И даже сам программный код, который программист пишет изо дня в день, имеет множество английских ключевых слов. Например, вот так выглядит код, который загрузил из базы данных для вас этот пост:</p><p><img src='https://storage.cloud.google.com/youit/sleng-programmistov-v-it/1.png' class='image-in-post' /></p><p>Так или иначе различные английские слова постепенно просачиваются в русский, особенно когда сам русский язык не имеет подходящего, короткого и удобного в произношении слова-аналога. Например, тяжело найти адекватный аналог в русском языке таким распространенным понятиям среди программистов как production environment, release или feature. Таким образом английские слова просто заполняют существующие пробелы русского. И не более того.</p>","Created":{"$date":{"$numberLong":"1572818400000"}},"Type":{"$numberInt":"1"},"WhoDisliked":["5dc2db2a8757be2a1cfb9db9"],"WhoLiked":[],"Views":{"$numberInt":"6"}}
{"_id":{"$oid":"5dbecc3fcdb700e273c1b33e"},"Title":"Junior C#! Не иди на собеседование, если не знаешь ответов на такие вопросы","Url":"junior-csharp-ne-idi-na-sobesedovaniye-esli-ne-znayesh-otvetov-na-takiye-voprosy","Text":"<p>Разработка программного обеспечения является настолько безграничной темой, что по ней можно поставить бесчисленное количество вопросов. Несмотря на подобное разнообразие, существует небольшой ряд фундаментальные вопросов, без которых не обходится ни одно собеседование по C# на должность Junior C# Developer. И незнание ответов на эти вопросы поставит под сомнение ваше потенциальное попадание на работу, невзирая на то как вы справитесь с другими менее фундаментальными вопросами.</p><p>Итак, не идите на собеседование, если вы не знаете ответов на перечисленные ниже вопросы.</p> <i><h3>C#</h3>Как работает JIT компиляция?</br>В чем разница между ссылочными и значимыми типами данных? <br/>Опишите работу сборщика мусора? <br/>Каково предназначение делегатов и событий?<br/>В чем разница между интерфейсом и абстрактным классом? <br/>Какая цель у интерфейсов IEnumerable и IEnumerator? <br/>В чем разница между типами String и StringBuilder? <br/>От какого базового типа наследуются все типы в .NET? <br/>В чем смысл процессов сериализации и десериализации? <br/>Чем коллекция Dictionary отличается от HashSet? <br/><h3>ООП</h3>Какие концепции ООП вы знаете? <br/>В чем разница между Абстракцией и Инкапсуляцией? <br/>Какие принципы SOLID вам знакомы? <br/>Что означает “Внедрение зависимостей”?<br/>В чем недостатки шаблона проектирования Одиночки или Singleton? <br/><h3>MSSQL</h3>Как создать связь многие ко многим? <br/>В чем преимущества нормализации данных? <br/>Для чего используется оператор HAVING? <br/>Как работает оператор INNER JOIN? <br/><h3>Алгоритмы</h3>В чем разница между структурами Stack, Queue и LinkedList? <br/>Как работает бинарный поиск? <br/>Как устроены хеш-таблицы<br/>Можете ли вы изобразить на листочке как выглядит бинарное дерево?</i> <br/><p><br/>Если вы не знаете ответа на какой-то из вышеперечисленных вопросов, давайте обсудим его в комментариях.</p>","Created":{"$date":{"$numberLong":"1572822000000"}},"Type":{"$numberInt":"2"},"WhoDisliked":[],"WhoLiked":[],"Views":{"$numberInt":"2"}}
{"_id":{"$oid":"5dbecc41cdb700e273c1b344"},"Title":"Нужны ли программисту сертификаты?","Url":"nuzhny-li-programmistu-sertifikaty","Text":"<p>В наше время существует огромное количество сертификаций, которые покрывают практически все инструменты IT-сферы, начиная от сертификаций по языкам программирования и заканчивая сертификациями по процессам разработки программного обеспечения. Программист, обладающий рядом сертификатов, выглядит крутым парнем и должен значительно выделяться в глазах своего работодателя и среди остальных коллег, которые этих самых сертификатов не имеют. Но действительно ли наличие сертификатов у программиста всегда свидетельствует о его крутости? Давайте разбираться.</p><p>Сертификаты отличаются не только тематикой, но и уровнем на котором они покрывают определенную тему. И такие сертификаты нужно уметь отличать один от другого, особенно работодателю. Одни сертификаты практически не возможно получить без реального опыта работы, а другие выдаются просто за то, что человек прослушал определенный курс. Прослушать курс может каждый, поэтому работодателю очевидно не стоит обращать внимание на подобные сертификаты. А программистам тем более не стоит прикреплять их к своему резюме, даже если прикрепить больше нечего.</p><p>Также важную роль играет подход программиста к подготовке к  сертификации. Первый возможный подход заключается в подготовке к сертификации ради сдачи самой сертификации, иными словами ради получения заветной бумажки со штампом. Выбрав такой путь, программист будет заниматься не более чем заучиванием подобных вопросов из интернета, без глубокого погружения в тему. </p><p>Но есть и второй подход, который начинается с осознания того, что сам факт получения или неполучения сертификата не столь важен, как сам кропотливый процесс подготовки к нему. Регистрация на экзамен - это лишь стимул и очерченные временные рамки для изучения большого количества материала, на который раньше никак не хватало времени. При втором подходе, имеющиеся знания в голове упорядочиваются, а также приобретаются новые, вследствие чего программист несомненно будет нести большую ценность для работодателя. </p><p>Всегда выбирайте второй вариант, так как в долгосрочной перспективе он бесценен. С новыми полученными зданиями в процессе подготовки к сертификации вы станете увереннее себя чувствовать как при решении сложных задач, при прохождении собеседований и временно утолите свою жажду к новым знаниям.</p>","Created":{"$date":{"$numberLong":"1572897600000"}},"Type":{"$numberInt":"1"},"WhoDisliked":["5dc2db2a8757be2a1cfb9db9"],"WhoLiked":["5dc3ff6a4964db81cc2340df"],"Views":{"$numberInt":"5"}}
{"_id":{"$oid":"5dbecc43cdb700e273c1b348"},"Title":"Junior developer, повышаем твои шансы на прохождение собеседования","Url":"junior-developer-povyshayem-tvoi-shansy-na-prokhozhdeniye-sobesedovaniya","Text":"<p>Для того чтобы понять как повысить свои шансы на успешное прохождение собеседования, давайте сначала посмотрим на то как проходит обычное собеседование в среднестатистическую аутсорсинговую компанию.</p><p>Вы приходите в офис и интервьюер начинает задавать вам вопросы, которые можно поделить на две категории: теоретические вопросы в основном по языку программирования, а также вопросы по вашему опыту работы. Но если вы начинающий разработчик, то интервьюер прекрасно понимает, что много о вашем опыте работы не поговоришь. Однако если вы еще не успели получить коммерческий опыт разработки, это не значит что приходить можно с пустыми руками. Сделайте небольшой pet-проект, который можно при необходимости презентовать. Однако даже с наличием собственного проекта, большая часть времени будет отведена под обычные теоретические вопросы. И ключевое слово здесь - Теория.</p><p>Для того, чтобы шансы на прохождения собеседования значительно возросли, вам необходимо научиться красиво и уверенно отвечать на распространенные теоретические вопросы по вашему языку программирования и смежным технологиям.</p><p>Вот представьте себе приятное изумление интервьюера, когда в ответ на вопрос: <i>“Что такое инкапсуляция?”</i> вместо невнятного и неправильного ответа <i>“инкапсуляция - сделать поля приватными”</i>, он слышит от вас ответ: <i>“ключевыми аспектами инкапсуляции являются защита инвариантов класса и сокрытие информации”</i>. Подобные ответы покажут вас как программиста, который не просто пишет код на автомате при помощи StackOverflow, а который всегда докапывается до сути и подходит к познанию своего дела как к науке, а не как к примитивному инструменту.</p><p>Научиться грамотно отвечать намного проще чем, может показаться на первый взгляд. Необходимо лишь регулярно читать хорошие книги. Старайтесь читать их хорошем переводе на свой родной язык, ведь ваши первые собеседования будут скорее всего также на русском. Не упускайте из виду ни единой строчки книги, как какую-то сухую теорию. Делайте выписки всего что вы не поняли, и старайтесь найти доступное объяснение в интернете. Прорабатывайте весь новый материал, старайтесь каждой новой книгой или статьей переосмыслить то что вы уже знаете, и в долгосрочной перспективе вы будете приятно удивлены полученным результатом. </p>","Created":{"$date":{"$numberLong":"1572908400000"}},"Type":{"$numberInt":"3"},"WhoDisliked":["5dc2db2a8757be2a1cfb9db9"],"WhoLiked":[],"Views":{"$numberInt":"3"}}
